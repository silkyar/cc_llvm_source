
test_code:     file format elf32-littlearm


Disassembly of section .interp:

00008134 <.interp>:
    8134:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8138:	2d646c2f 	stclcs	12, cr6, [r4, #-188]!	; 0xffffff44
    813c:	756e696c 	strbvc	r6, [lr, #-2412]!	; 0xfffff694
    8140:	6f732e78 	svcvs	0x00732e78
    8144:	Address 0x00008144 is out of bounds.


Disassembly of section .note.ABI-tag:

00008148 <.note.ABI-tag>:
    8148:	00000004 	andeq	r0, r0, r4
    814c:	00000010 	andeq	r0, r0, r0, lsl r0
    8150:	00000001 	andeq	r0, r0, r1
    8154:	00554e47 	subseq	r4, r5, r7, asr #28
    8158:	00000000 	andeq	r0, r0, r0
    815c:	00000002 	andeq	r0, r0, r2
    8160:	00000006 	andeq	r0, r0, r6
    8164:	00000010 	andeq	r0, r0, r0, lsl r0

Disassembly of section .hash:

00008168 <.hash>:
    8168:	00000003 	andeq	r0, r0, r3
    816c:	00000011 	andeq	r0, r0, r1, lsl r0
    8170:	0000000c 	andeq	r0, r0, ip
    8174:	00000010 	andeq	r0, r0, r0, lsl r0
    8178:	0000000f 	andeq	r0, r0, pc
	...
    8188:	00000002 	andeq	r0, r0, r2
    818c:	00000000 	andeq	r0, r0, r0
    8190:	00000004 	andeq	r0, r0, r4
    8194:	00000003 	andeq	r0, r0, r3
    8198:	00000006 	andeq	r0, r0, r6
    819c:	00000007 	andeq	r0, r0, r7
    81a0:	00000001 	andeq	r0, r0, r1
    81a4:	00000008 	andeq	r0, r0, r8
    81a8:	00000009 	andeq	r0, r0, r9
    81ac:	00000005 	andeq	r0, r0, r5
    81b0:	0000000a 	andeq	r0, r0, sl
    81b4:	0000000b 	andeq	r0, r0, fp
    81b8:	0000000e 	andeq	r0, r0, lr
    81bc:	0000000d 	andeq	r0, r0, sp

Disassembly of section .dynsym:

000081c0 <.dynsym>:
	...
    81d0:	00000077 	andeq	r0, r0, r7, ror r0
    81d4:	0000849c 	muleq	r0, ip, r4
    81d8:	00000000 	andeq	r0, r0, r0
    81dc:	00000012 	andeq	r0, r0, r2, lsl r0
    81e0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    81e4:	000084a8 	andeq	r8, r0, r8, lsr #9
    81e8:	00000000 	andeq	r0, r0, r0
    81ec:	00000012 	andeq	r0, r0, r2, lsl r0
    81f0:	0000000f 	andeq	r0, r0, pc
	...
    81fc:	00000012 	andeq	r0, r0, r2, lsl r0
    8200:	00000026 	andeq	r0, r0, r6, lsr #32
	...
    820c:	00000020 	andeq	r0, r0, r0, lsr #32
    8210:	00000035 	andeq	r0, r0, r5, lsr r0
	...
    821c:	00000020 	andeq	r0, r0, r0, lsr #32
    8220:	0000007d 	andeq	r0, r0, sp, ror r0
    8224:	000084c0 	andeq	r8, r0, r0, asr #9
    8228:	00000000 	andeq	r0, r0, r0
    822c:	00000012 	andeq	r0, r0, r2, lsl r0
    8230:	000000c2 	andeq	r0, r0, r2, asr #1
    8234:	000084cc 	andeq	r8, r0, ip, asr #9
    8238:	00000000 	andeq	r0, r0, r0
    823c:	00000012 	andeq	r0, r0, r2, lsl r0
    8240:	00000084 	andeq	r0, r0, r4, lsl #1
    8244:	000084d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8248:	00000000 	andeq	r0, r0, r0
    824c:	00000012 	andeq	r0, r0, r2, lsl r0
    8250:	000000a9 	andeq	r0, r0, r9, lsr #1
    8254:	000084e4 	andeq	r8, r0, r4, ror #9
    8258:	00000000 	andeq	r0, r0, r0
    825c:	00000012 	andeq	r0, r0, r2, lsl r0
    8260:	000000a8 	andeq	r0, r0, r8, lsr #1
    8264:	000084f0 	strdeq	r8, [r0], -r0
    8268:	00000000 	andeq	r0, r0, r0
    826c:	00000012 	andeq	r0, r0, r2, lsl r0
    8270:	0000008b 	andeq	r0, r0, fp, lsl #1
    8274:	000084fc 	strdeq	r8, [r0], -ip
    8278:	00000000 	andeq	r0, r0, r0
    827c:	00000012 	andeq	r0, r0, r2, lsl r0
    8280:	00000092 	muleq	r0, r2, r0
    8284:	00010e80 	andeq	r0, r1, r0, lsl #29
    8288:	00000004 	andeq	r0, r0, r4
    828c:	00170011 	andseq	r0, r7, r1, lsl r0
    8290:	00000099 	muleq	r0, r9, r0
    8294:	00008508 	andeq	r8, r0, r8, lsl #10
    8298:	00000000 	andeq	r0, r0, r0
    829c:	00000012 	andeq	r0, r0, r2, lsl r0
    82a0:	0000006f 	andeq	r0, r0, pc, rrx
    82a4:	00008514 	andeq	r8, r0, r4, lsl r5
    82a8:	00000000 	andeq	r0, r0, r0
    82ac:	00000012 	andeq	r0, r0, r2, lsl r0
    82b0:	00000049 	andeq	r0, r0, r9, asr #32
	...
    82bc:	00000012 	andeq	r0, r0, r2, lsl r0
    82c0:	0000006a 	andeq	r0, r0, sl, rrx
    82c4:	00008520 	andeq	r8, r0, r0, lsr #10
    82c8:	00000000 	andeq	r0, r0, r0
    82cc:	00000012 	andeq	r0, r0, r2, lsl r0

Disassembly of section .dynstr:

000082d0 <.dynstr>:
    82d0:	62696c00 	rsbvs	r6, r9, #0, 24
    82d4:	5f636367 	svcpl	0x00636367
    82d8:	6f732e73 	svcvs	0x00732e73
    82dc:	5f00312e 	svcpl	0x0000312e
    82e0:	6165615f 	cmnvs	r5, pc, asr r1
    82e4:	755f6962 	ldrbvc	r6, [pc, #-2402]	; 798a <_init-0xaf2>
    82e8:	6e69776e 	cdpvs	7, 6, cr7, cr9, cr14, {3}
    82ec:	70635f64 	rsbvc	r5, r3, r4, ror #30
    82f0:	72705f70 	rsbsvc	r5, r0, #112, 30	; 0x1c0
    82f4:	5f5f0030 	svcpl	0x005f0030
    82f8:	6e6f6d67 	cdpvs	13, 6, cr6, cr15, cr7, {3}
    82fc:	6174735f 	cmnvs	r4, pc, asr r3
    8300:	5f5f7472 	svcpl	0x005f7472
    8304:	764a5f00 	strbvc	r5, [sl], -r0, lsl #30
    8308:	6765525f 			; <UNDEFINED> instruction: 0x6765525f
    830c:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    8310:	616c4372 	smcvs	50226	; 0xc432
    8314:	73657373 	cmnvc	r5, #-872415231	; 0xcc000001
    8318:	615f5f00 	cmpvs	pc, r0, lsl #30
    831c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8320:	776e755f 			; <UNDEFINED> instruction: 0x776e755f
    8324:	5f646e69 	svcpl	0x00646e69
    8328:	5f707063 	svcpl	0x00707063
    832c:	00317270 	eorseq	r7, r1, r0, ror r2
    8330:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8334:	2e6f732e 	cdpcs	3, 6, cr7, cr15, cr14, {1}
    8338:	78650036 	stmdavc	r5!, {r1, r2, r4, r5}^
    833c:	72007469 	andvc	r7, r0, #1761607680	; 0x69000000
    8340:	6c6c6165 	stfvse	f6, [ip], #-404	; 0xfffffe6c
    8344:	6100636f 	tstvs	r0, pc, ror #6
    8348:	74726f62 	ldrbtvc	r6, [r2], #-3938	; 0xfffff09e
    834c:	6c616300 	stclvs	3, cr6, [r1], #-0
    8350:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    8354:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
    8358:	6d006e65 	stcvs	14, cr6, [r0, #-404]	; 0xfffffe6c
    835c:	6f6c6c61 	svcvs	0x006c6c61
    8360:	74730063 	ldrbtvc	r0, [r3], #-99	; 0xffffff9d
    8364:	72726564 	rsbsvc	r6, r2, #100, 10	; 0x19000000
    8368:	615f5f00 	cmpvs	pc, r0, lsl #30
    836c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8370:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    8374:	00797063 	rsbseq	r7, r9, r3, rrx
    8378:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    837c:	0066746e 	rsbeq	r7, r6, lr, ror #8
    8380:	696c5f5f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    8384:	735f6362 	cmpvc	pc, #-2013265919	; 0x88000001
    8388:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    838c:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    8390:	7266006e 	rsbvc	r0, r6, #110	; 0x6e
    8394:	47006565 	strmi	r6, [r0, -r5, ror #10]
    8398:	335f4343 	cmpcc	pc, #201326593	; 0xc000001
    839c:	4700352e 	strmi	r3, [r0, -lr, lsr #10]
    83a0:	4342494c 	movtmi	r4, #10572	; 0x294c
    83a4:	342e325f 	strtcc	r3, [lr], #-607	; 0xfffffda1
	...

Disassembly of section .gnu.version:

000083aa <.gnu.version>:
    83aa:	00020000 	andeq	r0, r2, r0
    83ae:	00030002 	andeq	r0, r3, r2
    83b2:	00000000 	andeq	r0, r0, r0
    83b6:	00020002 	andeq	r0, r2, r2
    83ba:	00020002 	andeq	r0, r2, r2
    83be:	00020002 	andeq	r0, r2, r2
    83c2:	00020002 	andeq	r0, r2, r2
    83c6:	00030002 	andeq	r0, r3, r2
    83ca:	Address 0x000083ca is out of bounds.


Disassembly of section .gnu.version_r:

000083cc <.gnu.version_r>:
    83cc:	00010001 	andeq	r0, r1, r1
    83d0:	00000001 	andeq	r0, r0, r1
    83d4:	00000010 	andeq	r0, r0, r0, lsl r0
    83d8:	00000020 	andeq	r0, r0, r0, lsr #32
    83dc:	0b792655 	bleq	1e51d38 <__bss_end__+0x1e40ea8>
    83e0:	00030000 	andeq	r0, r3, r0
    83e4:	000000c7 	andeq	r0, r0, r7, asr #1
    83e8:	00000000 	andeq	r0, r0, r0
    83ec:	00010001 	andeq	r0, r1, r1
    83f0:	00000060 	andeq	r0, r0, r0, rrx
    83f4:	00000010 	andeq	r0, r0, r0, lsl r0
    83f8:	00000000 	andeq	r0, r0, r0
    83fc:	0d696914 	stcleq	9, cr6, [r9, #-80]!	; 0xffffffb0
    8400:	00020000 	andeq	r0, r2, r0
    8404:	000000cf 	andeq	r0, r0, pc, asr #1
    8408:	00000000 	andeq	r0, r0, r0

Disassembly of section .rel.dyn:

0000840c <.rel.dyn>:
    840c:	00010e6c 	andeq	r0, r1, ip, ror #28
    8410:	00000415 	andeq	r0, r0, r5, lsl r4
    8414:	00010e80 	andeq	r0, r1, r0, lsl #29
    8418:	00000c14 	andeq	r0, r0, r4, lsl ip

Disassembly of section .rel.plt:

0000841c <.rel.plt>:
    841c:	00010e3c 	andeq	r0, r1, ip, lsr lr
    8420:	00000116 	andeq	r0, r0, r6, lsl r1
    8424:	00010e40 	andeq	r0, r1, r0, asr #28
    8428:	00000216 	andeq	r0, r0, r6, lsl r2
    842c:	00010e44 	andeq	r0, r1, r4, asr #28
    8430:	00000416 	andeq	r0, r0, r6, lsl r4
    8434:	00010e48 	andeq	r0, r1, r8, asr #28
    8438:	00000616 	andeq	r0, r0, r6, lsl r6
    843c:	00010e4c 	andeq	r0, r1, ip, asr #28
    8440:	00000716 	andeq	r0, r0, r6, lsl r7
    8444:	00010e50 	andeq	r0, r1, r0, asr lr
    8448:	00000816 	andeq	r0, r0, r6, lsl r8
    844c:	00010e54 	andeq	r0, r1, r4, asr lr
    8450:	00000916 	andeq	r0, r0, r6, lsl r9
    8454:	00010e58 	andeq	r0, r1, r8, asr lr
    8458:	00000a16 	andeq	r0, r0, r6, lsl sl
    845c:	00010e5c 	andeq	r0, r1, ip, asr lr
    8460:	00000b16 	andeq	r0, r0, r6, lsl fp
    8464:	00010e60 	andeq	r0, r1, r0, ror #28
    8468:	00000d16 	andeq	r0, r0, r6, lsl sp
    846c:	00010e64 	andeq	r0, r1, r4, ror #28
    8470:	00000e16 	andeq	r0, r0, r6, lsl lr
    8474:	00010e68 	andeq	r0, r1, r8, ror #28
    8478:	00001016 	andeq	r1, r0, r6, lsl r0

Disassembly of section .init:

0000847c <_init>:
    847c:	e92d4008 	push	{r3, lr}
    8480:	eb000038 	bl	8568 <call_gmon_start>
    8484:	e8bd8008 	pop	{r3, pc}

Disassembly of section .plt:

00008488 <.plt>:
    8488:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    848c:	e59fe004 	ldr	lr, [pc, #4]	; 8498 <_init+0x1c>
    8490:	e08fe00e 	add	lr, pc, lr
    8494:	e5bef008 	ldr	pc, [lr, #8]!
    8498:	00008998 	muleq	r0, r8, r9
    849c:	e28fc600 	add	ip, pc, #0, 12
    84a0:	e28cca08 	add	ip, ip, #8, 20	; 0x8000
    84a4:	e5bcf998 	ldr	pc, [ip, #2456]!	; 0x998
    84a8:	e28fc600 	add	ip, pc, #0, 12
    84ac:	e28cca08 	add	ip, ip, #8, 20	; 0x8000
    84b0:	e5bcf990 	ldr	pc, [ip, #2448]!	; 0x990
    84b4:	e28fc600 	add	ip, pc, #0, 12
    84b8:	e28cca08 	add	ip, ip, #8, 20	; 0x8000
    84bc:	e5bcf988 	ldr	pc, [ip, #2440]!	; 0x988
    84c0:	e28fc600 	add	ip, pc, #0, 12
    84c4:	e28cca08 	add	ip, ip, #8, 20	; 0x8000
    84c8:	e5bcf980 	ldr	pc, [ip, #2432]!	; 0x980
    84cc:	e28fc600 	add	ip, pc, #0, 12
    84d0:	e28cca08 	add	ip, ip, #8, 20	; 0x8000
    84d4:	e5bcf978 	ldr	pc, [ip, #2424]!	; 0x978
    84d8:	e28fc600 	add	ip, pc, #0, 12
    84dc:	e28cca08 	add	ip, ip, #8, 20	; 0x8000
    84e0:	e5bcf970 	ldr	pc, [ip, #2416]!	; 0x970
    84e4:	e28fc600 	add	ip, pc, #0, 12
    84e8:	e28cca08 	add	ip, ip, #8, 20	; 0x8000
    84ec:	e5bcf968 	ldr	pc, [ip, #2408]!	; 0x968
    84f0:	e28fc600 	add	ip, pc, #0, 12
    84f4:	e28cca08 	add	ip, ip, #8, 20	; 0x8000
    84f8:	e5bcf960 	ldr	pc, [ip, #2400]!	; 0x960
    84fc:	e28fc600 	add	ip, pc, #0, 12
    8500:	e28cca08 	add	ip, ip, #8, 20	; 0x8000
    8504:	e5bcf958 	ldr	pc, [ip, #2392]!	; 0x958
    8508:	e28fc600 	add	ip, pc, #0, 12
    850c:	e28cca08 	add	ip, ip, #8, 20	; 0x8000
    8510:	e5bcf950 	ldr	pc, [ip, #2384]!	; 0x950
    8514:	e28fc600 	add	ip, pc, #0, 12
    8518:	e28cca08 	add	ip, ip, #8, 20	; 0x8000
    851c:	e5bcf948 	ldr	pc, [ip, #2376]!	; 0x948
    8520:	e28fc600 	add	ip, pc, #0, 12
    8524:	e28cca08 	add	ip, ip, #8, 20	; 0x8000
    8528:	e5bcf940 	ldr	pc, [ip, #2368]!	; 0x940

Disassembly of section .text:

0000852c <_start>:
    852c:	e3a0b000 	mov	fp, #0
    8530:	e3a0e000 	mov	lr, #0
    8534:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    8538:	e1a0200d 	mov	r2, sp
    853c:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    8540:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    8544:	e59fc010 	ldr	ip, [pc, #16]	; 855c <_start+0x30>
    8548:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    854c:	e59f000c 	ldr	r0, [pc, #12]	; 8560 <_start+0x34>
    8550:	e59f300c 	ldr	r3, [pc, #12]	; 8564 <_start+0x38>
    8554:	ebffffd3 	bl	84a8 <_init+0x2c>
    8558:	ebffffcf 	bl	849c <_init+0x20>
    855c:	00008c48 	andeq	r8, r0, r8, asr #24
    8560:	000088c8 	andeq	r8, r0, r8, asr #17
    8564:	00008b80 	andeq	r8, r0, r0, lsl #23

00008568 <call_gmon_start>:
    8568:	e59f3014 	ldr	r3, [pc, #20]	; 8584 <call_gmon_start+0x1c>
    856c:	e59f0014 	ldr	r0, [pc, #20]	; 8588 <call_gmon_start+0x20>
    8570:	e08f3003 	add	r3, pc, r3
    8574:	e7932000 	ldr	r2, [r3, r0]
    8578:	e3520000 	cmp	r2, #0
    857c:	012fff1e 	bxeq	lr
    8580:	eaffffcb 	b	84b4 <_init+0x38>
    8584:	000088b8 			; <UNDEFINED> instruction: 0x000088b8
    8588:	0000003c 	andeq	r0, r0, ip, lsr r0

0000858c <__do_global_dtors_aux>:
    858c:	e59f3010 	ldr	r3, [pc, #16]	; 85a4 <__do_global_dtors_aux+0x18>
    8590:	e5d32000 	ldrb	r2, [r3]
    8594:	e3520000 	cmp	r2, #0
    8598:	03a02001 	moveq	r2, #1
    859c:	05c32000 	strbeq	r2, [r3]
    85a0:	e12fff1e 	bx	lr
    85a4:	00010e84 	andeq	r0, r1, r4, lsl #29

000085a8 <frame_dummy>:
    85a8:	e59f0020 	ldr	r0, [pc, #32]	; 85d0 <frame_dummy+0x28>
    85ac:	e92d4008 	push	{r3, lr}
    85b0:	e5903000 	ldr	r3, [r0]
    85b4:	e3530000 	cmp	r3, #0
    85b8:	08bd8008 	popeq	{r3, pc}
    85bc:	e59f3010 	ldr	r3, [pc, #16]	; 85d4 <frame_dummy+0x2c>
    85c0:	e3530000 	cmp	r3, #0
    85c4:	08bd8008 	popeq	{r3, pc}
    85c8:	e12fff33 	blx	r3
    85cc:	e8bd8008 	pop	{r3, pc}
    85d0:	00010d3c 	andeq	r0, r1, ip, lsr sp
    85d4:	00000000 	andeq	r0, r0, r0

000085d8 <concat_length>:
	.globl	concat_length
	.align	2
	.type	concat_length,%function
concat_length:                          @ @concat_length
@ BB#0:                                 @ %entry
	sub	sp, sp, #16
    85d8:	e24dd010 	sub	sp, sp, #16
	push	{r4, r5, r11, lr}
    85dc:	e92d4830 	push	{r4, r5, fp, lr}
	add	r11, sp, #8
    85e0:	e28db008 	add	fp, sp, #8
	sub	sp, sp, #8
    85e4:	e24dd008 	sub	sp, sp, #8
	add	r4, r11, #12
    85e8:	e28b400c 	add	r4, fp, #12
	cmp	r0, #0
    85ec:	e3500000 	cmp	r0, #0
	stm	r4, {r1, r2, r3}
    85f0:	e884000e 	stm	r4, {r1, r2, r3}
	add	r1, r11, #12
    85f4:	e28b100c 	add	r1, fp, #12
	mov	r4, #0
    85f8:	e3a04000 	mov	r4, #0
	str	r1, [sp]
    85fc:	e58d1000 	str	r1, [sp]
	beq	.LBB0_3
    8600:	0a000006 	beq	8620 <concat_length+0x48>
@ BB#1:                                 @ %for.body.lr.ph.i
	ldr	r5, [sp]
    8604:	e59d5000 	ldr	r5, [sp]
	mov	r4, #0
    8608:	e3a04000 	mov	r4, #0
.LBB0_2:                                @ %for.body.i
                                        @ =>This Inner Loop Header: Depth=1
	bl	strlen
    860c:	ebffffb1 	bl	84d8 <_init+0x5c>
	add	r4, r0, r4
    8610:	e0804004 	add	r4, r0, r4
	ldr	r0, [r5], #4
    8614:	e4950004 	ldr	r0, [r5], #4
	cmp	r0, #0
    8618:	e3500000 	cmp	r0, #0
	bne	.LBB0_2
    861c:	1afffffa 	bne	860c <concat_length+0x34>
.LBB0_3:                                @ %vconcat_length.exit
	mov	r0, r4
    8620:	e1a00004 	mov	r0, r4
	sub	sp, r11, #8
    8624:	e24bd008 	sub	sp, fp, #8
	pop	{r4, r5, r11, lr}
    8628:	e8bd4830 	pop	{r4, r5, fp, lr}
	add	sp, sp, #16
    862c:	e28dd010 	add	sp, sp, #16
	bx	lr
    8630:	e12fff1e 	bx	lr

00008634 <concat_copy>:
	.globl	concat_copy
	.align	2
	.type	concat_copy,%function
concat_copy:                            @ @concat_copy
@ BB#0:                                 @ %entry
	sub	sp, sp, #8
    8634:	e24dd008 	sub	sp, sp, #8
	push	{r4, r5, r6, r7, r8, r11, lr}
    8638:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
	add	r11, sp, #20
    863c:	e28db014 	add	fp, sp, #20
	sub	sp, sp, #4
    8640:	e24dd004 	sub	sp, sp, #4
	mov	r8, r0
    8644:	e1a08000 	mov	r8, r0
	mov	r5, r1
    8648:	e1a05001 	mov	r5, r1
	add	r0, r11, #8
    864c:	e28b0008 	add	r0, fp, #8
	str	r3, [r11, #12]
    8650:	e58b300c 	str	r3, [fp, #12]
	str	r2, [r11, #8]
    8654:	e58b2008 	str	r2, [fp, #8]
	mov	r6, r8
    8658:	e1a06008 	mov	r6, r8
	str	r0, [sp]
    865c:	e58d0000 	str	r0, [sp]
	cmp	r5, #0
    8660:	e3550000 	cmp	r5, #0
	beq	.LBB1_3
    8664:	0a00000c 	beq	869c <concat_copy+0x68>
@ BB#1:                                 @ %for.body.lr.ph.i
	ldr	r4, [sp]
    8668:	e59d4000 	ldr	r4, [sp]
	mov	r6, r8
    866c:	e1a06008 	mov	r6, r8
.LBB1_2:                                @ %for.body.i
                                        @ =>This Inner Loop Header: Depth=1
	mov	r0, r5
    8670:	e1a00005 	mov	r0, r5
	bl	strlen
    8674:	ebffff97 	bl	84d8 <_init+0x5c>
	mov	r7, r0
    8678:	e1a07000 	mov	r7, r0
	mov	r0, r6
    867c:	e1a00006 	mov	r0, r6
	mov	r1, r5
    8680:	e1a01005 	mov	r1, r5
	mov	r2, r7
    8684:	e1a02007 	mov	r2, r7
	bl	__aeabi_memcpy
    8688:	ebffff9e 	bl	8508 <_init+0x8c>
	ldr	r5, [r4], #4
    868c:	e4945004 	ldr	r5, [r4], #4
	add	r6, r6, r7
    8690:	e0866007 	add	r6, r6, r7
	cmp	r5, #0
    8694:	e3550000 	cmp	r5, #0
	bne	.LBB1_2
    8698:	1afffff4 	bne	8670 <concat_copy+0x3c>
.LBB1_3:                                @ %vconcat_copy.exit
	mov	r0, #0
    869c:	e3a00000 	mov	r0, #0
	strb	r0, [r6]
    86a0:	e5c60000 	strb	r0, [r6]
	mov	r0, r8
    86a4:	e1a00008 	mov	r0, r8
	sub	sp, r11, #20
    86a8:	e24bd014 	sub	sp, fp, #20
	pop	{r4, r5, r6, r7, r8, r11, lr}
    86ac:	e8bd49f0 	pop	{r4, r5, r6, r7, r8, fp, lr}
	add	sp, sp, #8
    86b0:	e28dd008 	add	sp, sp, #8
	bx	lr
    86b4:	e12fff1e 	bx	lr

000086b8 <concat_copy2>:
	.globl	concat_copy2
	.align	2
	.type	concat_copy2,%function
concat_copy2:                           @ @concat_copy2
@ BB#0:                                 @ %entry
	sub	sp, sp, #16
    86b8:	e24dd010 	sub	sp, sp, #16
	push	{r4, r5, r6, r7, r8, r11, lr}
    86bc:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
	add	r11, sp, #20
    86c0:	e28db014 	add	fp, sp, #20
	sub	sp, sp, #4
    86c4:	e24dd004 	sub	sp, sp, #4
	ldr	r8, .LCPI2_0
    86c8:	e59f8068 	ldr	r8, [pc, #104]	; 8738 <concat_copy2+0x80>
	add	r4, r11, #12
    86cc:	e28b400c 	add	r4, fp, #12
	mov	r5, r0
    86d0:	e1a05000 	mov	r5, r0
	add	r0, r11, #12
    86d4:	e28b000c 	add	r0, fp, #12
	stm	r4, {r1, r2, r3}
    86d8:	e884000e 	stm	r4, {r1, r2, r3}
	str	r0, [sp]
    86dc:	e58d0000 	str	r0, [sp]
	cmp	r5, #0
    86e0:	e3550000 	cmp	r5, #0
	ldr	r4, [r8]
    86e4:	e5984000 	ldr	r4, [r8]
	beq	.LBB2_3
    86e8:	0a00000b 	beq	871c <concat_copy2+0x64>
@ BB#1:                                 @ %for.body.lr.ph.i
	ldr	r7, [sp]
    86ec:	e59d7000 	ldr	r7, [sp]
.LBB2_2:                                @ %for.body.i
                                        @ =>This Inner Loop Header: Depth=1
	mov	r0, r5
    86f0:	e1a00005 	mov	r0, r5
	bl	strlen
    86f4:	ebffff77 	bl	84d8 <_init+0x5c>
	mov	r6, r0
    86f8:	e1a06000 	mov	r6, r0
	mov	r0, r4
    86fc:	e1a00004 	mov	r0, r4
	mov	r1, r5
    8700:	e1a01005 	mov	r1, r5
	mov	r2, r6
    8704:	e1a02006 	mov	r2, r6
	bl	__aeabi_memcpy
    8708:	ebffff7e 	bl	8508 <_init+0x8c>
	ldr	r5, [r7], #4
    870c:	e4975004 	ldr	r5, [r7], #4
	add	r4, r4, r6
    8710:	e0844006 	add	r4, r4, r6
	cmp	r5, #0
    8714:	e3550000 	cmp	r5, #0
	bne	.LBB2_2
    8718:	1afffff4 	bne	86f0 <concat_copy2+0x38>
.LBB2_3:                                @ %vconcat_copy.exit
	mov	r0, #0
    871c:	e3a00000 	mov	r0, #0
	strb	r0, [r4]
    8720:	e5c40000 	strb	r0, [r4]
	ldr	r0, [r8]
    8724:	e5980000 	ldr	r0, [r8]
	sub	sp, r11, #20
    8728:	e24bd014 	sub	sp, fp, #20
	pop	{r4, r5, r6, r7, r8, r11, lr}
    872c:	e8bd49f0 	pop	{r4, r5, r6, r7, r8, fp, lr}
	add	sp, sp, #16
    8730:	e28dd010 	add	sp, sp, #16
	bx	lr
    8734:	e12fff1e 	bx	lr
    8738:	00010e8c 	andeq	r0, r1, ip, lsl #29

0000873c <concat>:
	.globl	concat
	.align	2
	.type	concat,%function
concat:                                 @ @concat
@ BB#0:                                 @ %entry
	sub	sp, sp, #16
    873c:	e24dd010 	sub	sp, sp, #16
	push	{r4, r5, r6, r7, r8, r11, lr}
    8740:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
	add	r11, sp, #20
    8744:	e28db014 	add	fp, sp, #20
	sub	sp, sp, #12
    8748:	e24dd00c 	sub	sp, sp, #12
	mov	r4, r0
    874c:	e1a04000 	mov	r4, r0
	add	r5, r11, #12
    8750:	e28b500c 	add	r5, fp, #12
	add	r6, r11, #12
    8754:	e28b600c 	add	r6, fp, #12
	mov	r0, #1
    8758:	e3a00001 	mov	r0, #1
	stm	r5, {r1, r2, r3}
    875c:	e885000e 	stm	r5, {r1, r2, r3}
	str	r6, [sp, #8]
    8760:	e58d6008 	str	r6, [sp, #8]
	cmp	r4, #0
    8764:	e3540000 	cmp	r4, #0
	beq	.LBB3_4
    8768:	0a000008 	beq	8790 <concat+0x54>
@ BB#1:                                 @ %for.body.lr.ph.i
	ldr	r7, [sp, #8]
    876c:	e59d7008 	ldr	r7, [sp, #8]
	mov	r5, #0
    8770:	e3a05000 	mov	r5, #0
	mov	r0, r4
    8774:	e1a00004 	mov	r0, r4
.LBB3_2:                                @ %for.body.i
                                        @ =>This Inner Loop Header: Depth=1
	bl	strlen
    8778:	ebffff56 	bl	84d8 <_init+0x5c>
	add	r5, r0, r5
    877c:	e0805005 	add	r5, r0, r5
	ldr	r0, [r7], #4
    8780:	e4970004 	ldr	r0, [r7], #4
	cmp	r0, #0
    8784:	e3500000 	cmp	r0, #0
	bne	.LBB3_2
    8788:	1afffffa 	bne	8778 <concat+0x3c>
@ BB#3:                                 @ %vconcat_length.exit.loopexit
	add	r0, r5, #1
    878c:	e2850001 	add	r0, r5, #1
.LBB3_4:                                @ %vconcat_length.exit
	bl	xmalloc
    8790:	eb0000c4 	bl	8aa8 <xmalloc>
	mov	r8, r0
    8794:	e1a08000 	mov	r8, r0
	str	r6, [sp]
    8798:	e58d6000 	str	r6, [sp]
	cmp	r4, #0
    879c:	e3540000 	cmp	r4, #0
	mov	r6, r8
    87a0:	e1a06008 	mov	r6, r8
	beq	.LBB3_7
    87a4:	0a00000c 	beq	87dc <concat+0xa0>
@ BB#5:                                 @ %for.body.lr.ph.i14
	ldr	r5, [sp]
    87a8:	e59d5000 	ldr	r5, [sp]
	mov	r6, r8
    87ac:	e1a06008 	mov	r6, r8
.LBB3_6:                                @ %for.body.i19
                                        @ =>This Inner Loop Header: Depth=1
	mov	r0, r4
    87b0:	e1a00004 	mov	r0, r4
	bl	strlen
    87b4:	ebffff47 	bl	84d8 <_init+0x5c>
	mov	r7, r0
    87b8:	e1a07000 	mov	r7, r0
	mov	r0, r6
    87bc:	e1a00006 	mov	r0, r6
	mov	r1, r4
    87c0:	e1a01004 	mov	r1, r4
	mov	r2, r7
    87c4:	e1a02007 	mov	r2, r7
	bl	__aeabi_memcpy
    87c8:	ebffff4e 	bl	8508 <_init+0x8c>
	ldr	r4, [r5], #4
    87cc:	e4954004 	ldr	r4, [r5], #4
	add	r6, r6, r7
    87d0:	e0866007 	add	r6, r6, r7
	cmp	r4, #0
    87d4:	e3540000 	cmp	r4, #0
	bne	.LBB3_6
    87d8:	1afffff4 	bne	87b0 <concat+0x74>
.LBB3_7:                                @ %vconcat_copy.exit
	mov	r0, #0
    87dc:	e3a00000 	mov	r0, #0
	strb	r0, [r6]
    87e0:	e5c60000 	strb	r0, [r6]
	mov	r0, r8
    87e4:	e1a00008 	mov	r0, r8
	sub	sp, r11, #20
    87e8:	e24bd014 	sub	sp, fp, #20
	pop	{r4, r5, r6, r7, r8, r11, lr}
    87ec:	e8bd49f0 	pop	{r4, r5, r6, r7, r8, fp, lr}
	add	sp, sp, #16
    87f0:	e28dd010 	add	sp, sp, #16
	bx	lr
    87f4:	e12fff1e 	bx	lr

000087f8 <reconcat>:
	.globl	reconcat
	.align	2
	.type	reconcat,%function
reconcat:                               @ @reconcat
@ BB#0:                                 @ %entry
	sub	sp, sp, #8
    87f8:	e24dd008 	sub	sp, sp, #8
	push	{r4, r5, r6, r7, r8, r9, r11, lr}
    87fc:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
	add	r11, sp, #24
    8800:	e28db018 	add	fp, sp, #24
	sub	sp, sp, #16
    8804:	e24dd010 	sub	sp, sp, #16
	mov	r5, r1
    8808:	e1a05001 	mov	r5, r1
	mov	r8, r0
    880c:	e1a08000 	mov	r8, r0
	add	r4, r11, #8
    8810:	e28b4008 	add	r4, fp, #8
	mov	r0, #1
    8814:	e3a00001 	mov	r0, #1
	str	r3, [r11, #12]
    8818:	e58b300c 	str	r3, [fp, #12]
	str	r2, [r11, #8]
    881c:	e58b2008 	str	r2, [fp, #8]
	str	r4, [sp, #8]
    8820:	e58d4008 	str	r4, [sp, #8]
	cmp	r5, #0
    8824:	e3550000 	cmp	r5, #0
	beq	.LBB4_4
    8828:	0a000008 	beq	8850 <reconcat+0x58>
@ BB#1:                                 @ %for.body.lr.ph.i
	ldr	r7, [sp, #8]
    882c:	e59d7008 	ldr	r7, [sp, #8]
	mov	r6, #0
    8830:	e3a06000 	mov	r6, #0
	mov	r0, r5
    8834:	e1a00005 	mov	r0, r5
.LBB4_2:                                @ %for.body.i
                                        @ =>This Inner Loop Header: Depth=1
	bl	strlen
    8838:	ebffff26 	bl	84d8 <_init+0x5c>
	add	r6, r0, r6
    883c:	e0806006 	add	r6, r0, r6
	ldr	r0, [r7], #4
    8840:	e4970004 	ldr	r0, [r7], #4
	cmp	r0, #0
    8844:	e3500000 	cmp	r0, #0
	bne	.LBB4_2
    8848:	1afffffa 	bne	8838 <reconcat+0x40>
@ BB#3:                                 @ %vconcat_length.exit.loopexit
	add	r0, r6, #1
    884c:	e2860001 	add	r0, r6, #1
.LBB4_4:                                @ %vconcat_length.exit
	bl	xmalloc
    8850:	eb000094 	bl	8aa8 <xmalloc>
	mov	r9, r0
    8854:	e1a09000 	mov	r9, r0
	str	r4, [sp]
    8858:	e58d4000 	str	r4, [sp]
	cmp	r5, #0
    885c:	e3550000 	cmp	r5, #0
	mov	r7, r9
    8860:	e1a07009 	mov	r7, r9
	beq	.LBB4_7
    8864:	0a00000c 	beq	889c <reconcat+0xa4>
@ BB#5:                                 @ %for.body.lr.ph.i15
	ldr	r6, [sp]
    8868:	e59d6000 	ldr	r6, [sp]
	mov	r7, r9
    886c:	e1a07009 	mov	r7, r9
.LBB4_6:                                @ %for.body.i20
                                        @ =>This Inner Loop Header: Depth=1
	mov	r0, r5
    8870:	e1a00005 	mov	r0, r5
	bl	strlen
    8874:	ebffff17 	bl	84d8 <_init+0x5c>
	mov	r4, r0
    8878:	e1a04000 	mov	r4, r0
	mov	r0, r7
    887c:	e1a00007 	mov	r0, r7
	mov	r1, r5
    8880:	e1a01005 	mov	r1, r5
	mov	r2, r4
    8884:	e1a02004 	mov	r2, r4
	bl	__aeabi_memcpy
    8888:	ebffff1e 	bl	8508 <_init+0x8c>
	ldr	r5, [r6], #4
    888c:	e4965004 	ldr	r5, [r6], #4
	add	r7, r7, r4
    8890:	e0877004 	add	r7, r7, r4
	cmp	r5, #0
    8894:	e3550000 	cmp	r5, #0
	bne	.LBB4_6
    8898:	1afffff4 	bne	8870 <reconcat+0x78>
.LBB4_7:                                @ %vconcat_copy.exit
	mov	r0, #0
    889c:	e3a00000 	mov	r0, #0
	cmp	r8, #0
    88a0:	e3580000 	cmp	r8, #0
	strb	r0, [r7]
    88a4:	e5c70000 	strb	r0, [r7]
	beq	.LBB4_9
    88a8:	0a000001 	beq	88b4 <reconcat+0xbc>
@ BB#8:                                 @ %if.then
	mov	r0, r8
    88ac:	e1a00008 	mov	r0, r8
	bl	free
    88b0:	ebffff05 	bl	84cc <_init+0x50>
.LBB4_9:                                @ %if.end
	mov	r0, r9
    88b4:	e1a00009 	mov	r0, r9
	sub	sp, r11, #24
    88b8:	e24bd018 	sub	sp, fp, #24
	pop	{r4, r5, r6, r7, r8, r9, r11, lr}
    88bc:	e8bd4bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
	add	sp, sp, #8
    88c0:	e28dd008 	add	sp, sp, #8
	bx	lr
    88c4:	e12fff1e 	bx	lr

000088c8 <main>:
	.globl	main
	.align	2
	.type	main,%function
main:                                   @ @main
@ BB#0:                                 @ %entry
	push	{r4, r5, r6, r7, r11, lr}
    88c8:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
	add	r11, sp, #16
    88cc:	e28db010 	add	fp, sp, #16
	sub	sp, sp, #8
    88d0:	e24dd008 	sub	sp, sp, #8
	mov	r0, #0
    88d4:	e3a00000 	mov	r0, #0
	mov	r7, #0
    88d8:	e3a07000 	mov	r7, #0
	bl	concat
    88dc:	ebffff96 	bl	873c <concat>
	mov	r1, r0
    88e0:	e1a01000 	mov	r1, r0
	ldr	r0, .LCPI5_0
    88e4:	e59f00dc 	ldr	r0, [pc, #220]	; 89c8 <main+0x100>
	bl	printf
    88e8:	ebfffefd 	bl	84e4 <_init+0x68>
	ldr	r4, .LCPI5_1
    88ec:	e59f40d8 	ldr	r4, [pc, #216]	; 89cc <main+0x104>
	mov	r1, #0
    88f0:	e3a01000 	mov	r1, #0
	mov	r0, r4
    88f4:	e1a00004 	mov	r0, r4
	bl	concat
    88f8:	ebffff8f 	bl	873c <concat>
	mov	r1, r0
    88fc:	e1a01000 	mov	r1, r0
	ldr	r0, .LCPI5_2
    8900:	e59f00c8 	ldr	r0, [pc, #200]	; 89d0 <main+0x108>
	bl	printf
    8904:	ebfffef6 	bl	84e4 <_init+0x68>
	ldr	r5, .LCPI5_3
    8908:	e59f50c4 	ldr	r5, [pc, #196]	; 89d4 <main+0x10c>
	mov	r0, r4
    890c:	e1a00004 	mov	r0, r4
	mov	r2, #0
    8910:	e3a02000 	mov	r2, #0
	mov	r1, r5
    8914:	e1a01005 	mov	r1, r5
	bl	concat
    8918:	ebffff87 	bl	873c <concat>
	mov	r1, r0
    891c:	e1a01000 	mov	r1, r0
	ldr	r0, .LCPI5_4
    8920:	e59f00b0 	ldr	r0, [pc, #176]	; 89d8 <main+0x110>
	bl	printf
    8924:	ebfffeee 	bl	84e4 <_init+0x68>
	ldr	r6, .LCPI5_5
    8928:	e59f60ac 	ldr	r6, [pc, #172]	; 89dc <main+0x114>
	mov	r0, r4
    892c:	e1a00004 	mov	r0, r4
	mov	r1, r5
    8930:	e1a01005 	mov	r1, r5
	mov	r3, #0
    8934:	e3a03000 	mov	r3, #0
	mov	r2, r6
    8938:	e1a02006 	mov	r2, r6
	bl	concat
    893c:	ebffff7e 	bl	873c <concat>
	mov	r1, r0
    8940:	e1a01000 	mov	r1, r0
	ldr	r0, .LCPI5_6
    8944:	e59f0094 	ldr	r0, [pc, #148]	; 89e0 <main+0x118>
	bl	printf
    8948:	ebfffee5 	bl	84e4 <_init+0x68>
	ldr	r5, .LCPI5_7
    894c:	e59f5090 	ldr	r5, [pc, #144]	; 89e4 <main+0x11c>
	ldr	r1, .LCPI5_8
    8950:	e59f1090 	ldr	r1, [pc, #144]	; 89e8 <main+0x120>
	mov	r2, #0
    8954:	e3a02000 	mov	r2, #0
	mov	r0, r5
    8958:	e1a00005 	mov	r0, r5
	bl	concat
    895c:	ebffff76 	bl	873c <concat>
	mov	r1, r0
    8960:	e1a01000 	mov	r1, r0
	ldr	r0, .LCPI5_9
    8964:	e59f0080 	ldr	r0, [pc, #128]	; 89ec <main+0x124>
	bl	printf
    8968:	ebfffedd 	bl	84e4 <_init+0x68>
	ldr	r2, .LCPI5_10
    896c:	e59f207c 	ldr	r2, [pc, #124]	; 89f0 <main+0x128>
	mov	r0, r5
    8970:	e1a00005 	mov	r0, r5
	mov	r1, r6
    8974:	e1a01006 	mov	r1, r6
	mov	r3, #0
    8978:	e3a03000 	mov	r3, #0
	bl	concat
    897c:	ebffff6e 	bl	873c <concat>
	mov	r1, r0
    8980:	e1a01000 	mov	r1, r0
	ldr	r0, .LCPI5_11
    8984:	e59f0068 	ldr	r0, [pc, #104]	; 89f4 <main+0x12c>
	bl	printf
    8988:	ebfffed5 	bl	84e4 <_init+0x68>
	ldr	r0, .LCPI5_12
    898c:	e59f0064 	ldr	r0, [pc, #100]	; 89f8 <main+0x130>
	str	r7, [sp, #4]
    8990:	e58d7004 	str	r7, [sp, #4]
	ldr	r3, .LCPI5_14
    8994:	e59f3064 	ldr	r3, [pc, #100]	; 8a00 <main+0x138>
	mov	r1, r4
    8998:	e1a01004 	mov	r1, r4
	str	r0, [sp]
    899c:	e58d0000 	str	r0, [sp]
	ldr	r0, .LCPI5_13
    89a0:	e59f0054 	ldr	r0, [pc, #84]	; 89fc <main+0x134>
	mov	r2, r0
    89a4:	e1a02000 	mov	r2, r0
	bl	concat
    89a8:	ebffff63 	bl	873c <concat>
	mov	r1, r0
    89ac:	e1a01000 	mov	r1, r0
	ldr	r0, .LCPI5_15
    89b0:	e59f004c 	ldr	r0, [pc, #76]	; 8a04 <main+0x13c>
	bl	printf
    89b4:	ebfffeca 	bl	84e4 <_init+0x68>
	mov	r0, #0
    89b8:	e3a00000 	mov	r0, #0
	sub	sp, r11, #16
    89bc:	e24bd010 	sub	sp, fp, #16
	pop	{r4, r5, r6, r7, r11, lr}
    89c0:	e8bd48f0 	pop	{r4, r5, r6, r7, fp, lr}
	bx	lr
    89c4:	e12fff1e 	bx	lr
    89c8:	00008c58 	andeq	r8, r0, r8, asr ip
    89cc:	00008c6f 	andeq	r8, r0, pc, ror #24
    89d0:	00008c63 	andeq	r8, r0, r3, ror #24
    89d4:	00008c9e 	muleq	r0, lr, ip
    89d8:	00008c71 	andeq	r8, r0, r1, ror ip
    89dc:	00008c8c 	andeq	r8, r0, ip, lsl #25
    89e0:	00008c7e 	andeq	r8, r0, lr, ror ip
    89e4:	00008c9d 	muleq	r0, sp, ip
    89e8:	00008cc5 	andeq	r8, r0, r5, asr #25
    89ec:	00008c8e 	andeq	r8, r0, lr, lsl #25
    89f0:	00008cb0 			; <UNDEFINED> instruction: 0x00008cb0
    89f4:	00008ca0 	andeq	r8, r0, r0, lsr #25
    89f8:	00008cc8 	andeq	r8, r0, r8, asr #25
    89fc:	00008c62 	andeq	r8, r0, r2, ror #24
    8a00:	00008cc4 	andeq	r8, r0, r4, asr #25
    8a04:	00008cb3 			; <UNDEFINED> instruction: 0x00008cb3

00008a08 <xexit>:
	.globl	xexit
	.align	2
	.type	xexit,%function
xexit:                                  @ @xexit
@ BB#0:                                 @ %entry
	push	{r4, r11, lr}
    8a08:	e92d4810 	push	{r4, fp, lr}
	add	r11, sp, #4
    8a0c:	e28db004 	add	fp, sp, #4
	sub	sp, sp, #4
    8a10:	e24dd004 	sub	sp, sp, #4
	mov	r4, r0
    8a14:	e1a04000 	mov	r4, r0
	ldr	r0, .LCPI6_0
    8a18:	e59f0018 	ldr	r0, [pc, #24]	; 8a38 <xexit+0x30>
	ldr	r0, [r0]
    8a1c:	e5900000 	ldr	r0, [r0]
	cmp	r0, #0
    8a20:	e3500000 	cmp	r0, #0
	beq	.LBB6_2
    8a24:	0a000001 	beq	8a30 <xexit+0x28>
@ BB#1:                                 @ %if.then
	mov	lr, pc
    8a28:	e1a0e00f 	mov	lr, pc
	bx	r0
    8a2c:	e12fff10 	bx	r0
.LBB6_2:                                @ %if.end
	mov	r0, r4
    8a30:	e1a00004 	mov	r0, r4
	bl	exit
    8a34:	ebfffeb9 	bl	8520 <_init+0xa4>
    8a38:	00010e88 	andeq	r0, r1, r8, lsl #29

00008a3c <xmalloc_set_program_name>:
	.globl	xmalloc_set_program_name
	.align	2
	.type	xmalloc_set_program_name,%function
xmalloc_set_program_name:               @ @xmalloc_set_program_name
@ BB#0:                                 @ %entry
	ldr	r1, .LCPI7_0
    8a3c:	e59f1004 	ldr	r1, [pc, #4]	; 8a48 <xmalloc_set_program_name+0xc>
	str	r0, [r1]
    8a40:	e5810000 	str	r0, [r1]
	bx	lr
    8a44:	e12fff1e 	bx	lr
    8a48:	00010e78 	andeq	r0, r1, r8, ror lr

00008a4c <xmalloc_failed>:
	.globl	xmalloc_failed
	.align	2
	.type	xmalloc_failed,%function
xmalloc_failed:                         @ @xmalloc_failed
@ BB#0:                                 @ %entry
	push	{r11, lr}
    8a4c:	e92d4800 	push	{fp, lr}
	mov	r11, sp
    8a50:	e1a0b00d 	mov	fp, sp
	sub	sp, sp, #8
    8a54:	e24dd008 	sub	sp, sp, #8
	ldr	r1, .LCPI8_0
    8a58:	e59f1034 	ldr	r1, [pc, #52]	; 8a94 <xmalloc_failed+0x48>
	ldr	r3, .LCPI8_3
    8a5c:	e59f303c 	ldr	r3, [pc, #60]	; 8aa0 <xmalloc_failed+0x54>
	ldr	r12, [r1]
    8a60:	e591c000 	ldr	ip, [r1]
	ldr	r1, .LCPI8_1
    8a64:	e59f102c 	ldr	r1, [pc, #44]	; 8a98 <xmalloc_failed+0x4c>
	ldr	r2, [r1]
    8a68:	e5912000 	ldr	r2, [r1]
	ldrb	r1, [r2]
    8a6c:	e5d21000 	ldrb	r1, [r2]
	str	r0, [sp]
    8a70:	e58d0000 	str	r0, [sp]
	ldr	r0, .LCPI8_2
    8a74:	e59f0020 	ldr	r0, [pc, #32]	; 8a9c <xmalloc_failed+0x50>
	cmp	r1, #0
    8a78:	e3510000 	cmp	r1, #0
	ldr	r1, .LCPI8_4
    8a7c:	e59f1020 	ldr	r1, [pc, #32]	; 8aa4 <xmalloc_failed+0x58>
	movne	r3, r0
    8a80:	11a03000 	movne	r3, r0
	mov	r0, r12
    8a84:	e1a0000c 	mov	r0, ip
	bl	fprintf
    8a88:	ebfffe98 	bl	84f0 <_init+0x74>
	mov	r0, #1
    8a8c:	e3a00001 	mov	r0, #1
	bl	xexit
    8a90:	ebffffdc 	bl	8a08 <xexit>
    8a94:	00010e80 	andeq	r0, r1, r0, lsl #29
    8a98:	00010e78 	andeq	r0, r1, r8, ror lr
    8a9c:	00008ceb 	andeq	r8, r0, fp, ror #25
    8aa0:	00008c62 	andeq	r8, r0, r2, ror #24
    8aa4:	00008ccb 	andeq	r8, r0, fp, asr #25

00008aa8 <xmalloc>:
	.globl	xmalloc
	.align	2
	.type	xmalloc,%function
xmalloc:                                @ @xmalloc
@ BB#0:                                 @ %entry
	push	{r4, r11, lr}
    8aa8:	e92d4810 	push	{r4, fp, lr}
	add	r11, sp, #4
    8aac:	e28db004 	add	fp, sp, #4
	sub	sp, sp, #4
    8ab0:	e24dd004 	sub	sp, sp, #4
	mov	r4, r0
    8ab4:	e1a04000 	mov	r4, r0
	cmp	r4, #0
    8ab8:	e3540000 	cmp	r4, #0
	moveq	r4, #1
    8abc:	03a04001 	moveq	r4, #1
	mov	r0, r4
    8ac0:	e1a00004 	mov	r0, r4
	bl	malloc
    8ac4:	ebfffe8c 	bl	84fc <_init+0x80>
	cmp	r0, #0
    8ac8:	e3500000 	cmp	r0, #0
	subne	sp, r11, #4
    8acc:	124bd004 	subne	sp, fp, #4
	popne	{r4, r11, lr}
    8ad0:	18bd4810 	popne	{r4, fp, lr}
	bxne	lr
    8ad4:	112fff1e 	bxne	lr
	mov	r0, r4
    8ad8:	e1a00004 	mov	r0, r4
	bl	xmalloc_failed
    8adc:	ebffffda 	bl	8a4c <xmalloc_failed>

00008ae0 <xcalloc>:
	.globl	xcalloc
	.align	2
	.type	xcalloc,%function
xcalloc:                                @ @xcalloc
@ BB#0:                                 @ %entry
	push	{r4, r5, r11, lr}
    8ae0:	e92d4830 	push	{r4, r5, fp, lr}
	mov	r4, r1
    8ae4:	e1a04001 	mov	r4, r1
	mov	r5, r0
    8ae8:	e1a05000 	mov	r5, r0
	mov	r1, #0
    8aec:	e3a01000 	mov	r1, #0
	mov	r0, #0
    8af0:	e3a00000 	mov	r0, #0
	add	r11, sp, #8
    8af4:	e28db008 	add	fp, sp, #8
	cmp	r4, #0
    8af8:	e3540000 	cmp	r4, #0
	moveq	r1, #1
    8afc:	03a01001 	moveq	r1, #1
	cmp	r5, #0
    8b00:	e3550000 	cmp	r5, #0
	moveq	r0, #1
    8b04:	03a00001 	moveq	r0, #1
	orrs	r0, r0, r1
    8b08:	e1900001 	orrs	r0, r0, r1
	movne	r5, #1
    8b0c:	13a05001 	movne	r5, #1
	movne	r4, #1
    8b10:	13a04001 	movne	r4, #1
	mov	r0, r5
    8b14:	e1a00005 	mov	r0, r5
	mov	r1, r4
    8b18:	e1a01004 	mov	r1, r4
	bl	calloc
    8b1c:	ebfffe67 	bl	84c0 <_init+0x44>
	cmp	r0, #0
    8b20:	e3500000 	cmp	r0, #0
	popne	{r4, r5, r11, lr}
    8b24:	18bd4830 	popne	{r4, r5, fp, lr}
	bxne	lr
    8b28:	112fff1e 	bxne	lr
	mul	r0, r5, r4
    8b2c:	e0000495 	mul	r0, r5, r4
	bl	xmalloc_failed
    8b30:	ebffffc5 	bl	8a4c <xmalloc_failed>

00008b34 <xrealloc>:
	.globl	xrealloc
	.align	2
	.type	xrealloc,%function
xrealloc:                               @ @xrealloc
@ BB#0:                                 @ %entry
	push	{r4, r11, lr}
    8b34:	e92d4810 	push	{r4, fp, lr}
	add	r11, sp, #4
    8b38:	e28db004 	add	fp, sp, #4
	sub	sp, sp, #4
    8b3c:	e24dd004 	sub	sp, sp, #4
	mov	r4, r1
    8b40:	e1a04001 	mov	r4, r1
	cmp	r4, #0
    8b44:	e3540000 	cmp	r4, #0
	moveq	r4, #1
    8b48:	03a04001 	moveq	r4, #1
	cmp	r0, #0
    8b4c:	e3500000 	cmp	r0, #0
	beq	.LBB11_2
    8b50:	0a000002 	beq	8b60 <xrealloc+0x2c>
@ BB#1:                                 @ %if.else
	mov	r1, r4
    8b54:	e1a01004 	mov	r1, r4
	bl	realloc
    8b58:	ebfffe6d 	bl	8514 <_init+0x98>
	b	.LBB11_3
    8b5c:	ea000001 	b	8b68 <xrealloc+0x34>
.LBB11_2:                               @ %if.then1
	mov	r0, r4
    8b60:	e1a00004 	mov	r0, r4
	bl	malloc
    8b64:	ebfffe64 	bl	84fc <_init+0x80>
.LBB11_3:                               @ %if.end3
	cmp	r0, #0
    8b68:	e3500000 	cmp	r0, #0
	subne	sp, r11, #4
    8b6c:	124bd004 	subne	sp, fp, #4
	popne	{r4, r11, lr}
    8b70:	18bd4810 	popne	{r4, fp, lr}
	bxne	lr
    8b74:	112fff1e 	bxne	lr
	mov	r0, r4
    8b78:	e1a00004 	mov	r0, r4
	bl	xmalloc_failed
    8b7c:	ebffffb2 	bl	8a4c <xmalloc_failed>

00008b80 <__libc_csu_init>:
    8b80:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8b84:	e1a0a000 	mov	sl, r0
    8b88:	e1a08001 	mov	r8, r1
    8b8c:	e1a07002 	mov	r7, r2
    8b90:	e59f40a8 	ldr	r4, [pc, #168]	; 8c40 <__libc_csu_init+0xc0>
    8b94:	ebfffe38 	bl	847c <_init>
    8b98:	e59f10a4 	ldr	r1, [pc, #164]	; 8c44 <__libc_csu_init+0xc4>
    8b9c:	e08f4004 	add	r4, pc, r4
    8ba0:	e08f0001 	add	r0, pc, r1
    8ba4:	e0649000 	rsb	r9, r4, r0
    8ba8:	e1b09149 	asrs	r9, r9, #2
    8bac:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    8bb0:	e3a06001 	mov	r6, #1
    8bb4:	e4943004 	ldr	r3, [r4], #4
    8bb8:	e1a0000a 	mov	r0, sl
    8bbc:	e1a01008 	mov	r1, r8
    8bc0:	e1a02007 	mov	r2, r7
    8bc4:	e2495001 	sub	r5, r9, #1
    8bc8:	e12fff33 	blx	r3
    8bcc:	e1560009 	cmp	r6, r9
    8bd0:	e0055006 	and	r5, r5, r6
    8bd4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    8bd8:	e3550000 	cmp	r5, #0
    8bdc:	0a000007 	beq	8c00 <__libc_csu_init+0x80>
    8be0:	e494c004 	ldr	ip, [r4], #4
    8be4:	e1a0000a 	mov	r0, sl
    8be8:	e1a01008 	mov	r1, r8
    8bec:	e1a02007 	mov	r2, r7
    8bf0:	e3a06002 	mov	r6, #2
    8bf4:	e12fff3c 	blx	ip
    8bf8:	e1560009 	cmp	r6, r9
    8bfc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    8c00:	e1a05004 	mov	r5, r4
    8c04:	e4953004 	ldr	r3, [r5], #4
    8c08:	e1a0000a 	mov	r0, sl
    8c0c:	e1a01008 	mov	r1, r8
    8c10:	e1a02007 	mov	r2, r7
    8c14:	e12fff33 	blx	r3
    8c18:	e2866002 	add	r6, r6, #2
    8c1c:	e594c004 	ldr	ip, [r4, #4]
    8c20:	e1a0000a 	mov	r0, sl
    8c24:	e1a01008 	mov	r1, r8
    8c28:	e1a02007 	mov	r2, r7
    8c2c:	e12fff3c 	blx	ip
    8c30:	e1560009 	cmp	r6, r9
    8c34:	e2854004 	add	r4, r5, #4
    8c38:	1afffff0 	bne	8c00 <__libc_csu_init+0x80>
    8c3c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8c40:	00008190 	muleq	r0, r0, r1
    8c44:	00008190 	muleq	r0, r0, r1

00008c48 <__libc_csu_fini>:
    8c48:	e12fff1e 	bx	lr

Disassembly of section .fini:

00008c4c <_fini>:
    8c4c:	e92d4008 	push	{r3, lr}
    8c50:	e8bd8008 	pop	{r3, pc}

Disassembly of section .rodata:

00008c54 <_IO_stdin_used>:
    8c54:	00020001 	andeq	r0, r2, r1
    8c58:	3d202222 	sfmcc	f2, 4, [r0, #-136]!	; 0xffffff78
    8c5c:	73252220 	teqvc	r5, #32, 4
    8c60:	22000a22 	andcs	r0, r0, #139264	; 0x22000
    8c64:	3d202261 	sfmcc	f2, 4, [r0, #-388]!	; 0xfffffe7c
    8c68:	73252220 	teqvc	r5, #32, 4
    8c6c:	61000a22 	tstvs	r0, r2, lsr #20
    8c70:	62612200 	rsbvs	r2, r1, #0, 4
    8c74:	203d2022 	eorscs	r2, sp, r2, lsr #32
    8c78:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
    8c7c:	6122000a 	teqvs	r2, sl
    8c80:	20226362 	eorcs	r6, r2, r2, ror #6
    8c84:	2522203d 	strcs	r2, [r2, #-61]!	; 0xffffffc3
    8c88:	000a2273 	andeq	r2, sl, r3, ror r2
    8c8c:	61220063 	teqvs	r2, r3, rrx
    8c90:	22646362 	rsbcs	r6, r4, #-2013265919	; 0x88000001
    8c94:	22203d20 	eorcs	r3, r0, #32, 26	; 0x800
    8c98:	0a227325 	beq	8a5934 <__bss_end__+0x894aa4>
    8c9c:	00626100 	rsbeq	r6, r2, r0, lsl #2
    8ca0:	63626122 	cmnvs	r2, #-2147483640	; 0x80000008
    8ca4:	20226564 	eorcs	r6, r2, r4, ror #10
    8ca8:	2522203d 	strcs	r2, [r2, #-61]!	; 0xffffffc3
    8cac:	000a2273 	andeq	r2, sl, r3, ror r2
    8cb0:	22006564 	andcs	r6, r0, #100, 10	; 0x19000000
    8cb4:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
    8cb8:	20226665 	eorcs	r6, r2, r5, ror #12
    8cbc:	2522203d 	strcs	r2, [r2, #-61]!	; 0xffffffc3
    8cc0:	000a2273 	andeq	r2, sl, r3, ror r2
    8cc4:	00646362 	rsbeq	r6, r4, r2, ror #6
    8cc8:	0a006665 	beq	22664 <__bss_end__+0x117d4>
    8ccc:	73257325 	teqvc	r5, #-1811939328	; 0x94000000
    8cd0:	6e6e6143 	powvsem	f6, f6, f3
    8cd4:	6120746f 	teqvs	r0, pc, ror #8
    8cd8:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    8cdc:	20657461 	rsbcs	r7, r5, r1, ror #8
    8ce0:	20756c25 	rsbscs	r6, r5, r5, lsr #24
    8ce4:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    8ce8:	3a000a73 	bcc	b6bc <_IO_stdin_used+0x2a68>
    8cec:	Address 0x00008cec is out of bounds.


Disassembly of section .ARM.extab:

00008cf0 <.ARM.extab>:
    8cf0:	8101b108 	tsthi	r1, r8, lsl #2
    8cf4:	8400b0b0 	strhi	fp, [r0], #-176	; 0xffffff50
    8cf8:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.exidx:

00008cfc <.ARM.exidx>:
    8cfc:	7ffff830 	svcvc	0x00fff830
    8d00:	00000001 	andeq	r0, r0, r1
    8d04:	7ffff888 	svcvc	0x00fff888
    8d08:	80b0b0b0 	ldrhthi	fp, [r0], r0
    8d0c:	7ffff89c 	svcvc	0x00fff89c
    8d10:	7fffffe0 	svcvc	0x00ffffe0
    8d14:	7ffff8c4 	svcvc	0x00fff8c4
    8d18:	00000001 	andeq	r0, r0, r1
    8d1c:	7ffffe64 	svcvc	0x00fffe64
    8d20:	80aeb0b0 	strhhi	fp, [lr], r0	; <UNPREDICTABLE>
    8d24:	7fffff24 	svcvc	0x00ffff24
    8d28:	80b0b0b0 	ldrhthi	fp, [r0], r0
    8d2c:	7fffff20 	svcvc	0x00ffff20
    8d30:	00000001 	andeq	r0, r0, r1

Disassembly of section .init_array:

00010d34 <__frame_dummy_init_array_entry>:
   10d34:	000085a8 	andeq	r8, r0, r8, lsr #11

Disassembly of section .fini_array:

00010d38 <__do_global_dtors_aux_fini_array_entry>:
   10d38:	0000858c 	andeq	r8, r0, ip, lsl #11

Disassembly of section .jcr:

00010d3c <__JCR_END__>:
   10d3c:	00000000 	andeq	r0, r0, r0

Disassembly of section .dynamic:

00010d40 <_DYNAMIC>:
   10d40:	00000001 	andeq	r0, r0, r1
   10d44:	00000001 	andeq	r0, r0, r1
   10d48:	00000001 	andeq	r0, r0, r1
   10d4c:	00000060 	andeq	r0, r0, r0, rrx
   10d50:	0000000c 	andeq	r0, r0, ip
   10d54:	0000847c 	andeq	r8, r0, ip, ror r4
   10d58:	0000000d 	andeq	r0, r0, sp
   10d5c:	00008c4c 	andeq	r8, r0, ip, asr #24
   10d60:	00000019 	andeq	r0, r0, r9, lsl r0
   10d64:	00010d34 	andeq	r0, r1, r4, lsr sp
   10d68:	0000001b 	andeq	r0, r0, fp, lsl r0
   10d6c:	00000004 	andeq	r0, r0, r4
   10d70:	0000001a 	andeq	r0, r0, sl, lsl r0
   10d74:	00010d38 	andeq	r0, r1, r8, lsr sp
   10d78:	0000001c 	andeq	r0, r0, ip, lsl r0
   10d7c:	00000004 	andeq	r0, r0, r4
   10d80:	00000004 	andeq	r0, r0, r4
   10d84:	00008168 	andeq	r8, r0, r8, ror #2
   10d88:	00000005 	andeq	r0, r0, r5
   10d8c:	000082d0 	ldrdeq	r8, [r0], -r0
   10d90:	00000006 	andeq	r0, r0, r6
   10d94:	000081c0 	andeq	r8, r0, r0, asr #3
   10d98:	0000000a 	andeq	r0, r0, sl
   10d9c:	000000d9 	ldrdeq	r0, [r0], -r9
   10da0:	0000000b 	andeq	r0, r0, fp
   10da4:	00000010 	andeq	r0, r0, r0, lsl r0
   10da8:	00000015 	andeq	r0, r0, r5, lsl r0
   10dac:	00000000 	andeq	r0, r0, r0
   10db0:	00000003 	andeq	r0, r0, r3
   10db4:	00010e30 	andeq	r0, r1, r0, lsr lr
   10db8:	00000002 	andeq	r0, r0, r2
   10dbc:	00000060 	andeq	r0, r0, r0, rrx
   10dc0:	00000014 	andeq	r0, r0, r4, lsl r0
   10dc4:	00000011 	andeq	r0, r0, r1, lsl r0
   10dc8:	00000017 	andeq	r0, r0, r7, lsl r0
   10dcc:	0000841c 	andeq	r8, r0, ip, lsl r4
   10dd0:	00000011 	andeq	r0, r0, r1, lsl r0
   10dd4:	0000840c 	andeq	r8, r0, ip, lsl #8
   10dd8:	00000012 	andeq	r0, r0, r2, lsl r0
   10ddc:	00000010 	andeq	r0, r0, r0, lsl r0
   10de0:	00000013 	andeq	r0, r0, r3, lsl r0
   10de4:	00000008 	andeq	r0, r0, r8
   10de8:	6ffffffe 	svcvs	0x00fffffe
   10dec:	000083cc 	andeq	r8, r0, ip, asr #7
   10df0:	6fffffff 	svcvs	0x00ffffff
   10df4:	00000002 	andeq	r0, r0, r2
   10df8:	6ffffff0 	svcvs	0x00fffff0
   10dfc:	000083aa 	andeq	r8, r0, sl, lsr #7
	...

Disassembly of section .got:

00010e30 <_GLOBAL_OFFSET_TABLE_>:
   10e30:	00010d40 	andeq	r0, r1, r0, asr #26
	...
   10e3c:	00008488 	andeq	r8, r0, r8, lsl #9
   10e40:	00008488 	andeq	r8, r0, r8, lsl #9
   10e44:	00008488 	andeq	r8, r0, r8, lsl #9
   10e48:	00008488 	andeq	r8, r0, r8, lsl #9
   10e4c:	00008488 	andeq	r8, r0, r8, lsl #9
   10e50:	00008488 	andeq	r8, r0, r8, lsl #9
   10e54:	00008488 	andeq	r8, r0, r8, lsl #9
   10e58:	00008488 	andeq	r8, r0, r8, lsl #9
   10e5c:	00008488 	andeq	r8, r0, r8, lsl #9
   10e60:	00008488 	andeq	r8, r0, r8, lsl #9
   10e64:	00008488 	andeq	r8, r0, r8, lsl #9
   10e68:	00008488 	andeq	r8, r0, r8, lsl #9
   10e6c:	00000000 	andeq	r0, r0, r0

Disassembly of section .data:

00010e70 <__data_start>:
   10e70:	00000000 	andeq	r0, r0, r0

00010e74 <__dso_handle>:
   10e74:	00000000 	andeq	r0, r0, r0

00010e78 <name>:
   10e78:	00008c62 	andeq	r8, r0, r2, ror #24

Disassembly of section .bss:

00010e80 <stderr@@GLIBC_2.4>:
   10e80:	00000000 	andeq	r0, r0, r0

00010e84 <completed.8525>:
   10e84:	00000000 	andeq	r0, r0, r0

00010e88 <_xexit_cleanup>:
   10e88:	00000000 	andeq	r0, r0, r0

00010e8c <libiberty_concat_ptr>:
   10e8c:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	45543505 	ldrbmi	r3, [r4, #-1285]	; 0xfffffafb
  14:	08040600 	stmdaeq	r4, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <__bss_end__+0x355a0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	000085d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
  14:	000005a8 	andeq	r0, r0, r8, lsr #11
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000079 	andeq	r0, r0, r9, ror r0
   4:	00000002 	andeq	r0, r0, r2
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	000085d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
  14:	00008b80 	andeq	r8, r0, r0, lsl #23
  18:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
  1c:	646f635f 	strbtvs	r6, [pc], #-863	; 24 <_init-0x8458>
  20:	00732e65 	rsbseq	r2, r3, r5, ror #28
  24:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff70 <__bss_end__+0xfffef0e0>
  28:	69732f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
  2c:	61796b6c 	cmnvs	r9, ip, ror #22
  30:	6f572f72 	svcvs	0x00572f72
  34:	70736b72 	rsbsvc	r6, r3, r2, ror fp
  38:	2f656361 	svccs	0x00656361
  3c:	4d564c4c 	ldclmi	12, cr4, [r6, #-304]	; 0xfffffed0
  40:	766c6c2f 	strbtvc	r6, [ip], -pc, lsr #24
  44:	696c2f6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  48:	72542f62 	subsvc	r2, r4, #392	; 0x188
  4c:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
  50:	736d726f 	cmnvc	sp, #-268435450	; 0xf0000006
  54:	7465482f 	strbtvc	r4, [r5], #-2095	; 0xfffff7d1
  58:	666f7250 			; <UNDEFINED> instruction: 0x666f7250
  5c:	6f732f73 	svcvs	0x00732f73
  60:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
  64:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
  68:	00656c70 	rsbeq	r6, r5, r0, ror ip
  6c:	20554e47 	subscs	r4, r5, r7, asr #28
  70:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
  74:	2e30322e 	cdpcs	2, 3, cr3, cr0, cr14, {1}
  78:	01003135 	tsteq	r0, r5, lsr r1
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	10001101 	andne	r1, r0, r1, lsl #2
   4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
   8:	1b080301 	blne	200c14 <__bss_end__+0x1efd84>
   c:	13082508 	movwne	r2, #34056	; 0x8508
  10:	00000005 	andeq	r0, r0, r5

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001a0 	andeq	r0, r0, r0, lsr #3
   4:	00220002 	eoreq	r0, r2, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
  20:	646f635f 	strbtvs	r6, [pc], #-863	; 28 <_init-0x8454>
  24:	00732e65 	rsbseq	r2, r3, r5, ror #28
  28:	00000000 	andeq	r0, r0, r0
  2c:	d8020500 	stmdale	r2, {r8, sl}
  30:	03000085 	movweq	r0, #133	; 0x85
  34:	2f2f010c 	svccs	0x002f010c
  38:	2f2f2f2f 	svccs	0x002f2f2f
  3c:	2f2f2f2f 	svccs	0x002f2f2f
  40:	2f312f30 	svccs	0x00312f30
  44:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  48:	2f2f2f2f 	svccs	0x002f2f2f
  4c:	2f2e0903 	svccs	0x002e0903
  50:	2f2f2f2f 	svccs	0x002f2f2f
  54:	2f2f2f2f 	svccs	0x002f2f2f
  58:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  5c:	2f2f312f 	svccs	0x002f312f
  60:	2f2f2f2f 	svccs	0x002f2f2f
  64:	2f2f2f2f 	svccs	0x002f2f2f
  68:	2f2f2f30 	svccs	0x002f2f30
  6c:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
  70:	2f2f2e09 	svccs	0x002f2e09
  74:	2f2f2f2f 	svccs	0x002f2f2f
  78:	2f2f2f2f 	svccs	0x002f2f2f
  7c:	31302f2f 	teqcc	r0, pc, lsr #30
  80:	2f2f2f2f 	svccs	0x002f2f2f
  84:	2f2f2f2f 	svccs	0x002f2f2f
  88:	2f302f2f 	svccs	0x00302f2f
  8c:	2f2f2f2f 	svccs	0x002f2f2f
  90:	4a0d032f 	bmi	340d54 <__bss_end__+0x32fec4>
  94:	2f2f2f2f 	svccs	0x002f2f2f
  98:	2f2f2f2f 	svccs	0x002f2f2f
  9c:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  a0:	2f312f2f 	svccs	0x00312f2f
  a4:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  a8:	2f2f2f30 	svccs	0x002f2f30
  ac:	2f302f2f 	svccs	0x00302f2f
  b0:	2f2f2f31 	svccs	0x002f2f31
  b4:	2f2f2f2f 	svccs	0x002f2f2f
  b8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  bc:	2f2f2f2f 	svccs	0x002f2f2f
  c0:	09032f2f 	stmdbeq	r3, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
  c4:	2f2f2f2e 	svccs	0x002f2f2e
  c8:	2f2f2f2f 	svccs	0x002f2f2f
  cc:	2f2f2f2f 	svccs	0x002f2f2f
  d0:	2f2f302f 	svccs	0x002f302f
  d4:	2f2f2f31 	svccs	0x002f2f31
  d8:	2f30302f 	svccs	0x0030302f
  dc:	2f2f2f2f 	svccs	0x002f2f2f
  e0:	2f312f30 	svccs	0x00312f30
  e4:	2f2f2f2f 	svccs	0x002f2f2f
  e8:	2f2f2f2f 	svccs	0x002f2f2f
  ec:	2f2f302f 	svccs	0x002f302f
  f0:	302f302f 	eorcc	r3, pc, pc, lsr #32
  f4:	2f2f2f2f 	svccs	0x002f2f2f
  f8:	2f2e0903 	svccs	0x002e0903
  fc:	2f2f2f2f 	svccs	0x002f2f2f
 100:	2f2f2f2f 	svccs	0x002f2f2f
 104:	2f2f2f2f 	svccs	0x002f2f2f
 108:	2f2f2f2f 	svccs	0x002f2f2f
 10c:	2f2f2f2f 	svccs	0x002f2f2f
 110:	2f2f2f2f 	svccs	0x002f2f2f
 114:	2f2f2f2f 	svccs	0x002f2f2f
 118:	2f2f2f2f 	svccs	0x002f2f2f
 11c:	2f2f2f2f 	svccs	0x002f2f2f
 120:	2f2f2f2f 	svccs	0x002f2f2f
 124:	2f2f2f2f 	svccs	0x002f2f2f
 128:	2f2f2f2f 	svccs	0x002f2f2f
 12c:	2f2f2f2f 	svccs	0x002f2f2f
 130:	2f2f2f2f 	svccs	0x002f2f2f
 134:	2f2f2f2f 	svccs	0x002f2f2f
 138:	2b032f2f 	blcs	cbdfc <__bss_end__+0xbaf6c>
 13c:	2f012202 	svccs	0x00012202
 140:	2f2f2f2f 	svccs	0x002f2f2f
 144:	2f302f2f 	svccs	0x00302f2f
 148:	0d032f30 	stceq	15, cr2, [r3, #-192]	; 0xffffff40
 14c:	032f2f4a 	teqeq	pc, #296	; 0x128
 150:	2f2f4a0d 	svccs	0x002f4a0d
 154:	2f2f2f2f 	svccs	0x002f2f2f
 158:	2f2f2f2f 	svccs	0x002f2f2f
 15c:	2f2f2f2f 	svccs	0x002f2f2f
 160:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
 164:	2f2fba15 	svccs	0x002fba15
 168:	2f2f2f2f 	svccs	0x002f2f2f
 16c:	2f2f2f2f 	svccs	0x002f2f2f
 170:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
 174:	2f2f2e09 	svccs	0x002f2e09
 178:	2f2f2f2f 	svccs	0x002f2f2f
 17c:	2f2f2f2f 	svccs	0x002f2f2f
 180:	2f2f2f2f 	svccs	0x002f2f2f
 184:	2f2f2f2f 	svccs	0x002f2f2f
 188:	09032f2f 	stmdbeq	r3, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
 18c:	2f2f2f2e 	svccs	0x002f2f2e
 190:	2f2f2f2f 	svccs	0x002f2f2f
 194:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
 198:	2f2f302f 	svccs	0x002f302f
 19c:	022f2f2f 	eoreq	r2, pc, #47, 30	; 0xbc
 1a0:	01010002 	tsteq	r1, r2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000020 	andeq	r0, r0, r0, lsr #32
  14:	00000000 	andeq	r0, r0, r0
  18:	00008b80 	andeq	r8, r0, r0, lsl #23
  1c:	000000c8 	andeq	r0, r0, r8, asr #1
  20:	42200e42 	eormi	r0, r0, #1056	; 0x420
  24:	028a018e 	addeq	r0, sl, #-2147483613	; 0x80000023
  28:	04880389 	streq	r0, [r8], #905	; 0x389
  2c:	06860587 	streq	r0, [r6], r7, lsl #11
  30:	08840785 	stmeq	r4, {r0, r2, r7, r8, r9, sl}
  34:	0000000c 	andeq	r0, r0, ip
  38:	00000000 	andeq	r0, r0, r0
  3c:	00008c48 	andeq	r8, r0, r8, asr #24
  40:	00000004 	andeq	r0, r0, r4
