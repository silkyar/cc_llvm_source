
test_code:     file format elf64-x86-64


Disassembly of section .interp:

0000000000400238 <.interp>:
  400238:	2f                   	(bad)  
  400239:	6c                   	insb   (%dx),%es:(%rdi)
  40023a:	69 62 36 34 2f 6c 64 	imul   $0x646c2f34,0x36(%rdx),%esp
  400241:	2d 6c 69 6e 75       	sub    $0x756e696c,%eax
  400246:	78 2d                	js     400275 <_init-0x373>
  400248:	78 38                	js     400282 <_init-0x366>
  40024a:	36                   	ss
  40024b:	2d 36 34 2e 73       	sub    $0x732e3436,%eax
  400250:	6f                   	outsl  %ds:(%rsi),(%dx)
  400251:	2e 32 00             	xor    %cs:(%rax),%al

Disassembly of section .note.ABI-tag:

0000000000400254 <.note.ABI-tag>:
  400254:	04 00                	add    $0x0,%al
  400256:	00 00                	add    %al,(%rax)
  400258:	10 00                	adc    %al,(%rax)
  40025a:	00 00                	add    %al,(%rax)
  40025c:	01 00                	add    %eax,(%rax)
  40025e:	00 00                	add    %al,(%rax)
  400260:	47                   	rex.RXB
  400261:	4e 55                	rex.WRX push %rbp
  400263:	00 00                	add    %al,(%rax)
  400265:	00 00                	add    %al,(%rax)
  400267:	00 02                	add    %al,(%rdx)
  400269:	00 00                	add    %al,(%rax)
  40026b:	00 06                	add    %al,(%rsi)
  40026d:	00 00                	add    %al,(%rax)
  40026f:	00 18                	add    %bl,(%rax)
  400271:	00 00                	add    %al,(%rax)
	...

Disassembly of section .note.gnu.build-id:

0000000000400274 <.note.gnu.build-id>:
  400274:	04 00                	add    $0x0,%al
  400276:	00 00                	add    %al,(%rax)
  400278:	14 00                	adc    $0x0,%al
  40027a:	00 00                	add    %al,(%rax)
  40027c:	03 00                	add    (%rax),%eax
  40027e:	00 00                	add    %al,(%rax)
  400280:	47                   	rex.RXB
  400281:	4e 55                	rex.WRX push %rbp
  400283:	00 6f 8f             	add    %ch,-0x71(%rdi)
  400286:	0c c7                	or     $0xc7,%al
  400288:	69 b1 b8 23 23 4f da 	imul   $0x192c08da,0x4f2323b8(%rcx),%esi
  40028f:	08 2c 19 
  400292:	96                   	xchg   %eax,%esi
  400293:	72 7c                	jb     400311 <_init-0x2d7>
  400295:	23 1f                	and    (%rdi),%ebx
  400297:	55                   	push   %rbp

Disassembly of section .gnu.hash:

0000000000400298 <.gnu.hash>:
  400298:	02 00                	add    (%rax),%al
  40029a:	00 00                	add    %al,(%rax)
  40029c:	0c 00                	or     $0x0,%al
  40029e:	00 00                	add    %al,(%rax)
  4002a0:	01 00                	add    %eax,(%rax)
  4002a2:	00 00                	add    %al,(%rax)
  4002a4:	06                   	(bad)  
  4002a5:	00 00                	add    %al,(%rax)
  4002a7:	00 00                	add    %al,(%rax)
  4002a9:	01 00                	add    %eax,(%rax)
  4002ab:	00 00                	add    %al,(%rax)
  4002ad:	00 00                	add    %al,(%rax)
  4002af:	02 00                	add    (%rax),%al
  4002b1:	00 00                	add    %al,(%rax)
  4002b3:	00 0c 00             	add    %cl,(%rax,%rax,1)
  4002b6:	00 00                	add    %al,(%rax)
  4002b8:	39 f2                	cmp    %esi,%edx
  4002ba:	8b                   	.byte 0x8b
  4002bb:	1c                   	.byte 0x1c

Disassembly of section .dynsym:

00000000004002c0 <.dynsym>:
	...
  4002d8:	64 00 00             	add    %al,%fs:(%rax)
  4002db:	00 12                	add    %dl,(%rdx)
	...
  4002ed:	00 00                	add    %al,(%rax)
  4002ef:	00 2e                	add    %ch,(%rsi)
  4002f1:	00 00                	add    %al,(%rax)
  4002f3:	00 12                	add    %dl,(%rdx)
	...
  400305:	00 00                	add    %al,(%rax)
  400307:	00 4b 00             	add    %cl,0x0(%rbx)
  40030a:	00 00                	add    %al,(%rax)
  40030c:	12 00                	adc    (%rax),%al
	...
  40031e:	00 00                	add    %al,(%rax)
  400320:	52                   	push   %rdx
  400321:	00 00                	add    %al,(%rax)
  400323:	00 12                	add    %dl,(%rdx)
	...
  400335:	00 00                	add    %al,(%rax)
  400337:	00 27                	add    %ah,(%rdi)
  400339:	00 00                	add    %al,(%rax)
  40033b:	00 12                	add    %dl,(%rdx)
	...
  40034d:	00 00                	add    %al,(%rax)
  40034f:	00 4a 00             	add    %cl,0x0(%rdx)
  400352:	00 00                	add    %al,(%rax)
  400354:	12 00                	adc    (%rax),%al
	...
  400366:	00 00                	add    %al,(%rax)
  400368:	01 00                	add    %eax,(%rax)
  40036a:	00 00                	add    %al,(%rax)
  40036c:	20 00                	and    %al,(%rax)
	...
  40037e:	00 00                	add    %al,(%rax)
  400380:	35 00 00 00 12       	xor    $0x12000000,%eax
	...
  400395:	00 00                	add    %al,(%rax)
  400397:	00 3c 00             	add    %bh,(%rax,%rax,1)
  40039a:	00 00                	add    %al,(%rax)
  40039c:	12 00                	adc    (%rax),%al
	...
  4003ae:	00 00                	add    %al,(%rax)
  4003b0:	1f                   	(bad)  
  4003b1:	00 00                	add    %al,(%rax)
  4003b3:	00 12                	add    %dl,(%rdx)
	...
  4003c5:	00 00                	add    %al,(%rax)
  4003c7:	00 1a                	add    %bl,(%rdx)
  4003c9:	00 00                	add    %al,(%rax)
  4003cb:	00 12                	add    %dl,(%rdx)
	...
  4003dd:	00 00                	add    %al,(%rax)
  4003df:	00 43 00             	add    %al,0x0(%rbx)
  4003e2:	00 00                	add    %al,(%rax)
  4003e4:	11 00                	adc    %eax,(%rax)
  4003e6:	19 00                	sbb    %eax,(%rax)
  4003e8:	68 20 60 00 00       	pushq  $0x6020
  4003ed:	00 00                	add    %al,(%rax)
  4003ef:	00 08                	add    %cl,(%rax)
  4003f1:	00 00                	add    %al,(%rax)
  4003f3:	00 00                	add    %al,(%rax)
  4003f5:	00 00                	add    %al,(%rax)
	...

Disassembly of section .dynstr:

00000000004003f8 <.dynstr>:
  4003f8:	00 5f 5f             	add    %bl,0x5f(%rdi)
  4003fb:	67 6d                	insl   (%dx),%es:(%edi)
  4003fd:	6f                   	outsl  %ds:(%rsi),(%dx)
  4003fe:	6e                   	outsb  %ds:(%rsi),(%dx)
  4003ff:	5f                   	pop    %rdi
  400400:	73 74                	jae    400476 <_init-0x172>
  400402:	61                   	(bad)  
  400403:	72 74                	jb     400479 <_init-0x16f>
  400405:	5f                   	pop    %rdi
  400406:	5f                   	pop    %rdi
  400407:	00 6c 69 62          	add    %ch,0x62(%rcx,%rbp,2)
  40040b:	63 2e                	movslq (%rsi),%ebp
  40040d:	73 6f                	jae    40047e <_init-0x16a>
  40040f:	2e 36 00 65 78       	cs add %ah,%cs:%ss:0x78(%rbp)
  400414:	69 74 00 72 65 61 6c 	imul   $0x6c6c6165,0x72(%rax,%rax,1),%esi
  40041b:	6c 
  40041c:	6f                   	outsl  %ds:(%rsi),(%dx)
  40041d:	63 00                	movslq (%rax),%eax
  40041f:	63 61 6c             	movslq 0x6c(%rcx),%esp
  400422:	6c                   	insb   (%dx),%es:(%rdi)
  400423:	6f                   	outsl  %ds:(%rsi),(%dx)
  400424:	63 00                	movslq (%rax),%eax
  400426:	73 74                	jae    40049c <_init-0x14c>
  400428:	72 6c                	jb     400496 <_init-0x152>
  40042a:	65 6e                	outsb  %gs:(%rsi),(%dx)
  40042c:	00 6d 65             	add    %ch,0x65(%rbp)
  40042f:	6d                   	insl   (%dx),%es:(%rdi)
  400430:	63 70 79             	movslq 0x79(%rax),%esi
  400433:	00 6d 61             	add    %ch,0x61(%rbp)
  400436:	6c                   	insb   (%dx),%es:(%rdi)
  400437:	6c                   	insb   (%dx),%es:(%rdi)
  400438:	6f                   	outsl  %ds:(%rsi),(%dx)
  400439:	63 00                	movslq (%rax),%eax
  40043b:	73 74                	jae    4004b1 <_init-0x137>
  40043d:	64                   	fs
  40043e:	65                   	gs
  40043f:	72 72                	jb     4004b3 <_init-0x135>
  400441:	00 66 70             	add    %ah,0x70(%rsi)
  400444:	72 69                	jb     4004af <_init-0x139>
  400446:	6e                   	outsb  %ds:(%rsi),(%dx)
  400447:	74 66                	je     4004af <_init-0x139>
  400449:	00 5f 5f             	add    %bl,0x5f(%rdi)
  40044c:	6c                   	insb   (%dx),%es:(%rdi)
  40044d:	69 62 63 5f 73 74 61 	imul   $0x6174735f,0x63(%rdx),%esp
  400454:	72 74                	jb     4004ca <_init-0x11e>
  400456:	5f                   	pop    %rdi
  400457:	6d                   	insl   (%dx),%es:(%rdi)
  400458:	61                   	(bad)  
  400459:	69 6e 00 66 72 65 65 	imul   $0x65657266,0x0(%rsi),%ebp
  400460:	00 47 4c             	add    %al,0x4c(%rdi)
  400463:	49                   	rex.WB
  400464:	42                   	rex.X
  400465:	43 5f                	rex.XB pop %r15
  400467:	32 2e                	xor    (%rsi),%ch
  400469:	31 34 00             	xor    %esi,(%rax,%rax,1)
  40046c:	47                   	rex.RXB
  40046d:	4c                   	rex.WR
  40046e:	49                   	rex.WB
  40046f:	42                   	rex.X
  400470:	43 5f                	rex.XB pop %r15
  400472:	32 2e                	xor    (%rsi),%ch
  400474:	32 2e                	xor    (%rsi),%ch
  400476:	35                   	.byte 0x35
	...

Disassembly of section .gnu.version:

0000000000400478 <.gnu.version>:
  400478:	00 00                	add    %al,(%rax)
  40047a:	02 00                	add    (%rax),%al
  40047c:	02 00                	add    (%rax),%al
  40047e:	02 00                	add    (%rax),%al
  400480:	02 00                	add    (%rax),%al
  400482:	02 00                	add    (%rax),%al
  400484:	02 00                	add    (%rax),%al
  400486:	00 00                	add    %al,(%rax)
  400488:	03 00                	add    (%rax),%eax
  40048a:	02 00                	add    (%rax),%al
  40048c:	02 00                	add    (%rax),%al
  40048e:	02 00                	add    (%rax),%al
  400490:	02 00                	add    (%rax),%al

Disassembly of section .gnu.version_r:

0000000000400498 <.gnu.version_r>:
  400498:	01 00                	add    %eax,(%rax)
  40049a:	02 00                	add    (%rax),%al
  40049c:	10 00                	adc    %al,(%rax)
  40049e:	00 00                	add    %al,(%rax)
  4004a0:	10 00                	adc    %al,(%rax)
  4004a2:	00 00                	add    %al,(%rax)
  4004a4:	00 00                	add    %al,(%rax)
  4004a6:	00 00                	add    %al,(%rax)
  4004a8:	94                   	xchg   %eax,%esp
  4004a9:	91                   	xchg   %eax,%ecx
  4004aa:	96                   	xchg   %eax,%esi
  4004ab:	06                   	(bad)  
  4004ac:	00 00                	add    %al,(%rax)
  4004ae:	03 00                	add    (%rax),%eax
  4004b0:	69 00 00 00 10 00    	imul   $0x100000,(%rax),%eax
  4004b6:	00 00                	add    %al,(%rax)
  4004b8:	75 1a                	jne    4004d4 <_init-0x114>
  4004ba:	69 09 00 00 02 00    	imul   $0x20000,(%rcx),%ecx
  4004c0:	74 00                	je     4004c2 <_init-0x126>
  4004c2:	00 00                	add    %al,(%rax)
  4004c4:	00 00                	add    %al,(%rax)
	...

Disassembly of section .rela.dyn:

00000000004004c8 <.rela.dyn>:
  4004c8:	e0 1f                	loopne 4004e9 <_init-0xff>
  4004ca:	60                   	(bad)  
  4004cb:	00 00                	add    %al,(%rax)
  4004cd:	00 00                	add    %al,(%rax)
  4004cf:	00 06                	add    %al,(%rsi)
  4004d1:	00 00                	add    %al,(%rax)
  4004d3:	00 07                	add    %al,(%rdi)
	...
  4004dd:	00 00                	add    %al,(%rax)
  4004df:	00 68 20             	add    %ch,0x20(%rax)
  4004e2:	60                   	(bad)  
  4004e3:	00 00                	add    %al,(%rax)
  4004e5:	00 00                	add    %al,(%rax)
  4004e7:	00 05 00 00 00 0c    	add    %al,0xc000000(%rip)        # c4004ed <_end+0xbdfe465>
	...

Disassembly of section .rela.plt:

00000000004004f8 <.rela.plt>:
  4004f8:	00 20                	add    %ah,(%rax)
  4004fa:	60                   	(bad)  
  4004fb:	00 00                	add    %al,(%rax)
  4004fd:	00 00                	add    %al,(%rax)
  4004ff:	00 07                	add    %al,(%rdi)
  400501:	00 00                	add    %al,(%rax)
  400503:	00 01                	add    %al,(%rcx)
	...
  40050d:	00 00                	add    %al,(%rax)
  40050f:	00 08                	add    %cl,(%rax)
  400511:	20 60 00             	and    %ah,0x0(%rax)
  400514:	00 00                	add    %al,(%rax)
  400516:	00 00                	add    %al,(%rax)
  400518:	07                   	(bad)  
  400519:	00 00                	add    %al,(%rax)
  40051b:	00 02                	add    %al,(%rdx)
	...
  400525:	00 00                	add    %al,(%rax)
  400527:	00 10                	add    %dl,(%rax)
  400529:	20 60 00             	and    %ah,0x0(%rax)
  40052c:	00 00                	add    %al,(%rax)
  40052e:	00 00                	add    %al,(%rax)
  400530:	07                   	(bad)  
  400531:	00 00                	add    %al,(%rax)
  400533:	00 03                	add    %al,(%rbx)
	...
  40053d:	00 00                	add    %al,(%rax)
  40053f:	00 18                	add    %bl,(%rax)
  400541:	20 60 00             	and    %ah,0x0(%rax)
  400544:	00 00                	add    %al,(%rax)
  400546:	00 00                	add    %al,(%rax)
  400548:	07                   	(bad)  
  400549:	00 00                	add    %al,(%rax)
  40054b:	00 04 00             	add    %al,(%rax,%rax,1)
	...
  400556:	00 00                	add    %al,(%rax)
  400558:	20 20                	and    %ah,(%rax)
  40055a:	60                   	(bad)  
  40055b:	00 00                	add    %al,(%rax)
  40055d:	00 00                	add    %al,(%rax)
  40055f:	00 07                	add    %al,(%rdi)
  400561:	00 00                	add    %al,(%rax)
  400563:	00 05 00 00 00 00    	add    %al,0x0(%rip)        # 400569 <_init-0x7f>
  400569:	00 00                	add    %al,(%rax)
  40056b:	00 00                	add    %al,(%rax)
  40056d:	00 00                	add    %al,(%rax)
  40056f:	00 28                	add    %ch,(%rax)
  400571:	20 60 00             	and    %ah,0x0(%rax)
  400574:	00 00                	add    %al,(%rax)
  400576:	00 00                	add    %al,(%rax)
  400578:	07                   	(bad)  
  400579:	00 00                	add    %al,(%rax)
  40057b:	00 06                	add    %al,(%rsi)
	...
  400585:	00 00                	add    %al,(%rax)
  400587:	00 30                	add    %dh,(%rax)
  400589:	20 60 00             	and    %ah,0x0(%rax)
  40058c:	00 00                	add    %al,(%rax)
  40058e:	00 00                	add    %al,(%rax)
  400590:	07                   	(bad)  
  400591:	00 00                	add    %al,(%rax)
  400593:	00 08                	add    %cl,(%rax)
	...
  40059d:	00 00                	add    %al,(%rax)
  40059f:	00 38                	add    %bh,(%rax)
  4005a1:	20 60 00             	and    %ah,0x0(%rax)
  4005a4:	00 00                	add    %al,(%rax)
  4005a6:	00 00                	add    %al,(%rax)
  4005a8:	07                   	(bad)  
  4005a9:	00 00                	add    %al,(%rax)
  4005ab:	00 09                	add    %cl,(%rcx)
	...
  4005b5:	00 00                	add    %al,(%rax)
  4005b7:	00 40 20             	add    %al,0x20(%rax)
  4005ba:	60                   	(bad)  
  4005bb:	00 00                	add    %al,(%rax)
  4005bd:	00 00                	add    %al,(%rax)
  4005bf:	00 07                	add    %al,(%rdi)
  4005c1:	00 00                	add    %al,(%rax)
  4005c3:	00 0a                	add    %cl,(%rdx)
	...
  4005cd:	00 00                	add    %al,(%rax)
  4005cf:	00 48 20             	add    %cl,0x20(%rax)
  4005d2:	60                   	(bad)  
  4005d3:	00 00                	add    %al,(%rax)
  4005d5:	00 00                	add    %al,(%rax)
  4005d7:	00 07                	add    %al,(%rdi)
  4005d9:	00 00                	add    %al,(%rax)
  4005db:	00 0b                	add    %cl,(%rbx)
	...

Disassembly of section .init:

00000000004005e8 <_init>:
  4005e8:	48 83 ec 08          	sub    $0x8,%rsp
  4005ec:	e8 eb 00 00 00       	callq  4006dc <call_gmon_start>
  4005f1:	48 83 c4 08          	add    $0x8,%rsp
  4005f5:	c3                   	retq   

Disassembly of section .plt:

0000000000400600 <free@plt-0x10>:
  400600:	ff 35 ea 19 20 00    	pushq  0x2019ea(%rip)        # 601ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
  400606:	ff 25 ec 19 20 00    	jmpq   *0x2019ec(%rip)        # 601ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
  40060c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400610 <free@plt>:
  400610:	ff 25 ea 19 20 00    	jmpq   *0x2019ea(%rip)        # 602000 <_GLOBAL_OFFSET_TABLE_+0x18>
  400616:	68 00 00 00 00       	pushq  $0x0
  40061b:	e9 e0 ff ff ff       	jmpq   400600 <_init+0x18>

0000000000400620 <strlen@plt>:
  400620:	ff 25 e2 19 20 00    	jmpq   *0x2019e2(%rip)        # 602008 <_GLOBAL_OFFSET_TABLE_+0x20>
  400626:	68 01 00 00 00       	pushq  $0x1
  40062b:	e9 d0 ff ff ff       	jmpq   400600 <_init+0x18>

0000000000400630 <printf@plt>:
  400630:	ff 25 da 19 20 00    	jmpq   *0x2019da(%rip)        # 602010 <_GLOBAL_OFFSET_TABLE_+0x28>
  400636:	68 02 00 00 00       	pushq  $0x2
  40063b:	e9 c0 ff ff ff       	jmpq   400600 <_init+0x18>

0000000000400640 <__libc_start_main@plt>:
  400640:	ff 25 d2 19 20 00    	jmpq   *0x2019d2(%rip)        # 602018 <_GLOBAL_OFFSET_TABLE_+0x30>
  400646:	68 03 00 00 00       	pushq  $0x3
  40064b:	e9 b0 ff ff ff       	jmpq   400600 <_init+0x18>

0000000000400650 <calloc@plt>:
  400650:	ff 25 ca 19 20 00    	jmpq   *0x2019ca(%rip)        # 602020 <_GLOBAL_OFFSET_TABLE_+0x38>
  400656:	68 04 00 00 00       	pushq  $0x4
  40065b:	e9 a0 ff ff ff       	jmpq   400600 <_init+0x18>

0000000000400660 <fprintf@plt>:
  400660:	ff 25 c2 19 20 00    	jmpq   *0x2019c2(%rip)        # 602028 <_GLOBAL_OFFSET_TABLE_+0x40>
  400666:	68 05 00 00 00       	pushq  $0x5
  40066b:	e9 90 ff ff ff       	jmpq   400600 <_init+0x18>

0000000000400670 <memcpy@plt>:
  400670:	ff 25 ba 19 20 00    	jmpq   *0x2019ba(%rip)        # 602030 <_GLOBAL_OFFSET_TABLE_+0x48>
  400676:	68 06 00 00 00       	pushq  $0x6
  40067b:	e9 80 ff ff ff       	jmpq   400600 <_init+0x18>

0000000000400680 <malloc@plt>:
  400680:	ff 25 b2 19 20 00    	jmpq   *0x2019b2(%rip)        # 602038 <_GLOBAL_OFFSET_TABLE_+0x50>
  400686:	68 07 00 00 00       	pushq  $0x7
  40068b:	e9 70 ff ff ff       	jmpq   400600 <_init+0x18>

0000000000400690 <realloc@plt>:
  400690:	ff 25 aa 19 20 00    	jmpq   *0x2019aa(%rip)        # 602040 <_GLOBAL_OFFSET_TABLE_+0x58>
  400696:	68 08 00 00 00       	pushq  $0x8
  40069b:	e9 60 ff ff ff       	jmpq   400600 <_init+0x18>

00000000004006a0 <exit@plt>:
  4006a0:	ff 25 a2 19 20 00    	jmpq   *0x2019a2(%rip)        # 602048 <_GLOBAL_OFFSET_TABLE_+0x60>
  4006a6:	68 09 00 00 00       	pushq  $0x9
  4006ab:	e9 50 ff ff ff       	jmpq   400600 <_init+0x18>

Disassembly of section .text:

00000000004006b0 <_start>:
  4006b0:	31 ed                	xor    %ebp,%ebp
  4006b2:	49 89 d1             	mov    %rdx,%r9
  4006b5:	5e                   	pop    %rsi
  4006b6:	48 89 e2             	mov    %rsp,%rdx
  4006b9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  4006bd:	50                   	push   %rax
  4006be:	54                   	push   %rsp
  4006bf:	49 c7 c0 c0 10 40 00 	mov    $0x4010c0,%r8
  4006c6:	48 c7 c1 30 10 40 00 	mov    $0x401030,%rcx
  4006cd:	48 c7 c7 80 0d 40 00 	mov    $0x400d80,%rdi
  4006d4:	e8 67 ff ff ff       	callq  400640 <__libc_start_main@plt>
  4006d9:	f4                   	hlt    
  4006da:	90                   	nop
  4006db:	90                   	nop

00000000004006dc <call_gmon_start>:
  4006dc:	48 83 ec 08          	sub    $0x8,%rsp
  4006e0:	48 8b 05 f9 18 20 00 	mov    0x2018f9(%rip),%rax        # 601fe0 <_DYNAMIC+0x1d0>
  4006e7:	48 85 c0             	test   %rax,%rax
  4006ea:	74 02                	je     4006ee <call_gmon_start+0x12>
  4006ec:	ff d0                	callq  *%rax
  4006ee:	48 83 c4 08          	add    $0x8,%rsp
  4006f2:	c3                   	retq   
  4006f3:	90                   	nop
  4006f4:	90                   	nop
  4006f5:	90                   	nop
  4006f6:	90                   	nop
  4006f7:	90                   	nop
  4006f8:	90                   	nop
  4006f9:	90                   	nop
  4006fa:	90                   	nop
  4006fb:	90                   	nop
  4006fc:	90                   	nop
  4006fd:	90                   	nop
  4006fe:	90                   	nop
  4006ff:	90                   	nop

0000000000400700 <deregister_tm_clones>:
  400700:	b8 6f 20 60 00       	mov    $0x60206f,%eax
  400705:	55                   	push   %rbp
  400706:	48 2d 68 20 60 00    	sub    $0x602068,%rax
  40070c:	48 83 f8 0e          	cmp    $0xe,%rax
  400710:	48 89 e5             	mov    %rsp,%rbp
  400713:	77 02                	ja     400717 <deregister_tm_clones+0x17>
  400715:	5d                   	pop    %rbp
  400716:	c3                   	retq   
  400717:	b8 00 00 00 00       	mov    $0x0,%eax
  40071c:	48 85 c0             	test   %rax,%rax
  40071f:	74 f4                	je     400715 <deregister_tm_clones+0x15>
  400721:	5d                   	pop    %rbp
  400722:	bf 68 20 60 00       	mov    $0x602068,%edi
  400727:	ff e0                	jmpq   *%rax
  400729:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400730 <register_tm_clones>:
  400730:	b8 68 20 60 00       	mov    $0x602068,%eax
  400735:	55                   	push   %rbp
  400736:	48 2d 68 20 60 00    	sub    $0x602068,%rax
  40073c:	48 c1 f8 03          	sar    $0x3,%rax
  400740:	48 89 e5             	mov    %rsp,%rbp
  400743:	48 89 c2             	mov    %rax,%rdx
  400746:	48 c1 ea 3f          	shr    $0x3f,%rdx
  40074a:	48 01 d0             	add    %rdx,%rax
  40074d:	48 d1 f8             	sar    %rax
  400750:	75 02                	jne    400754 <register_tm_clones+0x24>
  400752:	5d                   	pop    %rbp
  400753:	c3                   	retq   
  400754:	ba 00 00 00 00       	mov    $0x0,%edx
  400759:	48 85 d2             	test   %rdx,%rdx
  40075c:	74 f4                	je     400752 <register_tm_clones+0x22>
  40075e:	5d                   	pop    %rbp
  40075f:	48 89 c6             	mov    %rax,%rsi
  400762:	bf 68 20 60 00       	mov    $0x602068,%edi
  400767:	ff e2                	jmpq   *%rdx
  400769:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400770 <__do_global_dtors_aux>:
  400770:	80 3d f9 18 20 00 00 	cmpb   $0x0,0x2018f9(%rip)        # 602070 <completed.6976>
  400777:	75 11                	jne    40078a <__do_global_dtors_aux+0x1a>
  400779:	55                   	push   %rbp
  40077a:	48 89 e5             	mov    %rsp,%rbp
  40077d:	e8 7e ff ff ff       	callq  400700 <deregister_tm_clones>
  400782:	5d                   	pop    %rbp
  400783:	c6 05 e6 18 20 00 01 	movb   $0x1,0x2018e6(%rip)        # 602070 <completed.6976>
  40078a:	f3 c3                	repz retq 
  40078c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400790 <frame_dummy>:
  400790:	48 83 3d 70 16 20 00 	cmpq   $0x0,0x201670(%rip)        # 601e08 <__JCR_END__>
  400797:	00 
  400798:	74 1e                	je     4007b8 <frame_dummy+0x28>
  40079a:	b8 00 00 00 00       	mov    $0x0,%eax
  40079f:	48 85 c0             	test   %rax,%rax
  4007a2:	74 14                	je     4007b8 <frame_dummy+0x28>
  4007a4:	55                   	push   %rbp
  4007a5:	bf 08 1e 60 00       	mov    $0x601e08,%edi
  4007aa:	48 89 e5             	mov    %rsp,%rbp
  4007ad:	ff d0                	callq  *%rax
  4007af:	5d                   	pop    %rbp
  4007b0:	e9 7b ff ff ff       	jmpq   400730 <register_tm_clones>
  4007b5:	0f 1f 00             	nopl   (%rax)
  4007b8:	e9 73 ff ff ff       	jmpq   400730 <register_tm_clones>
  4007bd:	90                   	nop
  4007be:	90                   	nop
  4007bf:	90                   	nop

00000000004007c0 <concat_length>:
	.align	16, 0x90
	.type	concat_length,@function
concat_length:                          # @concat_length
	.cfi_startproc
# BB#0:                                 # %entry
	subq	$216, %rsp
  4007c0:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
.Ltmp1:
	.cfi_def_cfa_offset 224
	testb	%al, %al
  4007c7:	84 c0                	test   %al,%al
	je	.LBB0_2
  4007c9:	74 31                	je     4007fc <concat_length+0x3c>
# BB#1:                                 # %entry
	movaps	%xmm0, 48(%rsp)
  4007cb:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
	movaps	%xmm1, 64(%rsp)
  4007d0:	0f 29 4c 24 40       	movaps %xmm1,0x40(%rsp)
	movaps	%xmm2, 80(%rsp)
  4007d5:	0f 29 54 24 50       	movaps %xmm2,0x50(%rsp)
	movaps	%xmm3, 96(%rsp)
  4007da:	0f 29 5c 24 60       	movaps %xmm3,0x60(%rsp)
	movaps	%xmm4, 112(%rsp)
  4007df:	0f 29 64 24 70       	movaps %xmm4,0x70(%rsp)
	movaps	%xmm5, 128(%rsp)
  4007e4:	0f 29 ac 24 80 00 00 	movaps %xmm5,0x80(%rsp)
  4007eb:	00 
	movaps	%xmm6, 144(%rsp)
  4007ec:	0f 29 b4 24 90 00 00 	movaps %xmm6,0x90(%rsp)
  4007f3:	00 
	movaps	%xmm7, 160(%rsp)
  4007f4:	0f 29 bc 24 a0 00 00 	movaps %xmm7,0xa0(%rsp)
  4007fb:	00 
.LBB0_2:                                # %entry
	movq	%r9, 40(%rsp)
  4007fc:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
	movq	%r8, 32(%rsp)
  400801:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
	movq	%rcx, 24(%rsp)
  400806:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
	movq	%rdx, 16(%rsp)
  40080b:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
	movq	%rsi, 8(%rsp)
  400810:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	movq	%rdi, 208(%rsp)
  400815:	48 89 bc 24 d0 00 00 	mov    %rdi,0xd0(%rsp)
  40081c:	00 
	leaq	(%rsp), %rax
  40081d:	48 8d 04 24          	lea    (%rsp),%rax
	movq	%rax, 192(%rsp)
  400821:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  400828:	00 
	leaq	224(%rsp), %rax
  400829:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  400830:	00 
	movq	%rax, 184(%rsp)
  400831:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  400838:	00 
	movl	$48, 180(%rsp)
  400839:	c7 84 24 b4 00 00 00 	movl   $0x30,0xb4(%rsp)
  400840:	30 00 00 00 
	movl	$8, 176(%rsp)
  400844:	c7 84 24 b0 00 00 00 	movl   $0x8,0xb0(%rsp)
  40084b:	08 00 00 00 
	movq	208(%rsp), %rdi
  40084f:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
  400856:	00 
	leaq	176(%rsp), %rsi
  400857:	48 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%rsi
  40085e:	00 
	callq	vconcat_length
  40085f:	e8 1c 00 00 00       	callq  400880 <vconcat_length>
	movq	%rax, 200(%rsp)
  400864:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  40086b:	00 
	addq	$216, %rsp
  40086c:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
	ret
  400873:	c3                   	retq   
  400874:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%rax,%rax,1)
  40087b:	00 00 00 00 00 

0000000000400880 <vconcat_length>:
	.align	16, 0x90
	.type	vconcat_length,@function
vconcat_length:                         # @vconcat_length
	.cfi_startproc
# BB#0:                                 # %entry
	subq	$40, %rsp
  400880:	48 83 ec 28          	sub    $0x28,%rsp
.Ltmp4:
	.cfi_def_cfa_offset 48
	movq	%rdi, 32(%rsp)
  400884:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
	movq	%rsi, 24(%rsp)
  400889:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
	movq	$0, 16(%rsp)
  40088e:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  400895:	00 00 
	movq	32(%rsp), %rax
  400897:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
	jmp	.LBB1_1
  40089c:	eb 14                	jmp    4008b2 <vconcat_length+0x32>
  40089e:	66 90                	xchg   %ax,%ax
	.align	16, 0x90
.LBB1_3:                                # %vaarg.in_reg
                                        #   in Loop: Header=BB1_1 Depth=1
	movq	16(%rax), %rdx
  4008a0:	48 8b 50 10          	mov    0x10(%rax),%rdx
	leal	8(%rcx), %esi
  4008a4:	8d 71 08             	lea    0x8(%rcx),%esi
	movl	%esi, (%rax)
  4008a7:	89 30                	mov    %esi,(%rax)
	movslq	%ecx, %rcx
  4008a9:	48 63 c9             	movslq %ecx,%rcx
	addq	%rdx, %rcx
  4008ac:	48 01 d1             	add    %rdx,%rcx
	movq	(%rcx), %rax
  4008af:	48 8b 01             	mov    (%rcx),%rax
.LBB1_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, 8(%rsp)
  4008b2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	cmpq	$0, 8(%rsp)
  4008b7:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
	je	.LBB1_6
  4008bd:	74 2c                	je     4008eb <vconcat_length+0x6b>
# BB#2:                                 # %for.inc
                                        #   in Loop: Header=BB1_1 Depth=1
	movq	8(%rsp), %rdi
  4008bf:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
	callq	strlen
  4008c4:	e8 57 fd ff ff       	callq  400620 <strlen@plt>
	addq	%rax, 16(%rsp)
  4008c9:	48 01 44 24 10       	add    %rax,0x10(%rsp)
	movq	24(%rsp), %rax
  4008ce:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
	movl	(%rax), %ecx
  4008d3:	8b 08                	mov    (%rax),%ecx
	cmpl	$40, %ecx
  4008d5:	83 f9 28             	cmp    $0x28,%ecx
	jbe	.LBB1_3
  4008d8:	76 c6                	jbe    4008a0 <vconcat_length+0x20>
# BB#4:                                 # %vaarg.in_mem
                                        #   in Loop: Header=BB1_1 Depth=1
	movq	8(%rax), %rcx
  4008da:	48 8b 48 08          	mov    0x8(%rax),%rcx
	leaq	8(%rcx), %rdx
  4008de:	48 8d 51 08          	lea    0x8(%rcx),%rdx
	movq	%rdx, 8(%rax)
  4008e2:	48 89 50 08          	mov    %rdx,0x8(%rax)
	movq	(%rcx), %rax
  4008e6:	48 8b 01             	mov    (%rcx),%rax
	jmp	.LBB1_1
  4008e9:	eb c7                	jmp    4008b2 <vconcat_length+0x32>
.LBB1_6:                                # %for.end
	movq	16(%rsp), %rax
  4008eb:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
	addq	$40, %rsp
  4008f0:	48 83 c4 28          	add    $0x28,%rsp
	ret
  4008f4:	c3                   	retq   
  4008f5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  4008fc:	00 00 00 00 

0000000000400900 <concat_copy>:
	.align	16, 0x90
	.type	concat_copy,@function
concat_copy:                            # @concat_copy
	.cfi_startproc
# BB#0:                                 # %entry
	subq	$232, %rsp
  400900:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
.Ltmp7:
	.cfi_def_cfa_offset 240
	testb	%al, %al
  400907:	84 c0                	test   %al,%al
	je	.LBB2_2
  400909:	74 31                	je     40093c <concat_copy+0x3c>
# BB#1:                                 # %entry
	movaps	%xmm0, 48(%rsp)
  40090b:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
	movaps	%xmm1, 64(%rsp)
  400910:	0f 29 4c 24 40       	movaps %xmm1,0x40(%rsp)
	movaps	%xmm2, 80(%rsp)
  400915:	0f 29 54 24 50       	movaps %xmm2,0x50(%rsp)
	movaps	%xmm3, 96(%rsp)
  40091a:	0f 29 5c 24 60       	movaps %xmm3,0x60(%rsp)
	movaps	%xmm4, 112(%rsp)
  40091f:	0f 29 64 24 70       	movaps %xmm4,0x70(%rsp)
	movaps	%xmm5, 128(%rsp)
  400924:	0f 29 ac 24 80 00 00 	movaps %xmm5,0x80(%rsp)
  40092b:	00 
	movaps	%xmm6, 144(%rsp)
  40092c:	0f 29 b4 24 90 00 00 	movaps %xmm6,0x90(%rsp)
  400933:	00 
	movaps	%xmm7, 160(%rsp)
  400934:	0f 29 bc 24 a0 00 00 	movaps %xmm7,0xa0(%rsp)
  40093b:	00 
.LBB2_2:                                # %entry
	movq	%r9, 40(%rsp)
  40093c:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
	movq	%r8, 32(%rsp)
  400941:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
	movq	%rcx, 24(%rsp)
  400946:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
	movq	%rdx, 16(%rsp)
  40094b:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
	movq	%rdi, 224(%rsp)
  400950:	48 89 bc 24 e0 00 00 	mov    %rdi,0xe0(%rsp)
  400957:	00 
	movq	%rsi, 216(%rsp)
  400958:	48 89 b4 24 d8 00 00 	mov    %rsi,0xd8(%rsp)
  40095f:	00 
	leaq	(%rsp), %rax
  400960:	48 8d 04 24          	lea    (%rsp),%rax
	movq	%rax, 192(%rsp)
  400964:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  40096b:	00 
	leaq	240(%rsp), %rax
  40096c:	48 8d 84 24 f0 00 00 	lea    0xf0(%rsp),%rax
  400973:	00 
	movq	%rax, 184(%rsp)
  400974:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  40097b:	00 
	movl	$48, 180(%rsp)
  40097c:	c7 84 24 b4 00 00 00 	movl   $0x30,0xb4(%rsp)
  400983:	30 00 00 00 
	movl	$16, 176(%rsp)
  400987:	c7 84 24 b0 00 00 00 	movl   $0x10,0xb0(%rsp)
  40098e:	10 00 00 00 
	movq	216(%rsp), %rsi
  400992:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  400999:	00 
	movq	224(%rsp), %rdi
  40099a:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  4009a1:	00 
	leaq	176(%rsp), %rdx
  4009a2:	48 8d 94 24 b0 00 00 	lea    0xb0(%rsp),%rdx
  4009a9:	00 
	callq	vconcat_copy
  4009aa:	e8 21 00 00 00       	callq  4009d0 <vconcat_copy>
	movq	224(%rsp), %rax
  4009af:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  4009b6:	00 
	movq	%rax, 208(%rsp)
  4009b7:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  4009be:	00 
	addq	$232, %rsp
  4009bf:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
	ret
  4009c6:	c3                   	retq   
  4009c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4009ce:	00 00 

00000000004009d0 <vconcat_copy>:
	.align	16, 0x90
	.type	vconcat_copy,@function
vconcat_copy:                           # @vconcat_copy
	.cfi_startproc
# BB#0:                                 # %entry
	subq	$56, %rsp
  4009d0:	48 83 ec 38          	sub    $0x38,%rsp
.Ltmp10:
	.cfi_def_cfa_offset 64
	movq	%rdi, 48(%rsp)
  4009d4:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
	movq	%rsi, 40(%rsp)
  4009d9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
	movq	%rdx, 32(%rsp)
  4009de:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
	movq	48(%rsp), %rax
  4009e3:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
	movq	%rax, 24(%rsp)
  4009e8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
	movq	40(%rsp), %rax
  4009ed:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
	jmp	.LBB3_1
  4009f2:	eb 1e                	jmp    400a12 <vconcat_copy+0x42>
  4009f4:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%rax,%rax,1)
  4009fb:	00 00 00 00 00 
	.align	16, 0x90
.LBB3_3:                                # %vaarg.in_reg
                                        #   in Loop: Header=BB3_1 Depth=1
	movq	16(%rax), %rdx
  400a00:	48 8b 50 10          	mov    0x10(%rax),%rdx
	leal	8(%rcx), %esi
  400a04:	8d 71 08             	lea    0x8(%rcx),%esi
	movl	%esi, (%rax)
  400a07:	89 30                	mov    %esi,(%rax)
	movslq	%ecx, %rcx
  400a09:	48 63 c9             	movslq %ecx,%rcx
	addq	%rdx, %rcx
  400a0c:	48 01 d1             	add    %rdx,%rcx
	movq	(%rcx), %rax
  400a0f:	48 8b 01             	mov    (%rcx),%rax
.LBB3_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, 16(%rsp)
  400a12:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
	cmpq	$0, 16(%rsp)
  400a17:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
	je	.LBB3_6
  400a1d:	74 48                	je     400a67 <vconcat_copy+0x97>
# BB#2:                                 # %for.inc
                                        #   in Loop: Header=BB3_1 Depth=1
	movq	16(%rsp), %rdi
  400a1f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
	callq	strlen
  400a24:	e8 f7 fb ff ff       	callq  400620 <strlen@plt>
	movq	%rax, 8(%rsp)
  400a29:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	movq	16(%rsp), %rsi
  400a2e:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
	movq	24(%rsp), %rdi
  400a33:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
	movq	%rax, %rdx
  400a38:	48 89 c2             	mov    %rax,%rdx
	callq	memcpy
  400a3b:	e8 30 fc ff ff       	callq  400670 <memcpy@plt>
	movq	8(%rsp), %rax
  400a40:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	addq	%rax, 24(%rsp)
  400a45:	48 01 44 24 18       	add    %rax,0x18(%rsp)
	movq	32(%rsp), %rax
  400a4a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
	movl	(%rax), %ecx
  400a4f:	8b 08                	mov    (%rax),%ecx
	cmpl	$40, %ecx
  400a51:	83 f9 28             	cmp    $0x28,%ecx
	jbe	.LBB3_3
  400a54:	76 aa                	jbe    400a00 <vconcat_copy+0x30>
# BB#4:                                 # %vaarg.in_mem
                                        #   in Loop: Header=BB3_1 Depth=1
	movq	8(%rax), %rcx
  400a56:	48 8b 48 08          	mov    0x8(%rax),%rcx
	leaq	8(%rcx), %rdx
  400a5a:	48 8d 51 08          	lea    0x8(%rcx),%rdx
	movq	%rdx, 8(%rax)
  400a5e:	48 89 50 08          	mov    %rdx,0x8(%rax)
	movq	(%rcx), %rax
  400a62:	48 8b 01             	mov    (%rcx),%rax
	jmp	.LBB3_1
  400a65:	eb ab                	jmp    400a12 <vconcat_copy+0x42>
.LBB3_6:                                # %for.end
	movq	24(%rsp), %rax
  400a67:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
	movb	$0, (%rax)
  400a6c:	c6 00 00             	movb   $0x0,(%rax)
	movq	48(%rsp), %rax
  400a6f:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
	addq	$56, %rsp
  400a74:	48 83 c4 38          	add    $0x38,%rsp
	ret
  400a78:	c3                   	retq   
  400a79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400a80 <concat_copy2>:
	.align	16, 0x90
	.type	concat_copy2,@function
concat_copy2:                           # @concat_copy2
	.cfi_startproc
# BB#0:                                 # %entry
	subq	$216, %rsp
  400a80:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
.Ltmp13:
	.cfi_def_cfa_offset 224
	testb	%al, %al
  400a87:	84 c0                	test   %al,%al
	je	.LBB4_2
  400a89:	74 31                	je     400abc <concat_copy2+0x3c>
# BB#1:                                 # %entry
	movaps	%xmm0, 48(%rsp)
  400a8b:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
	movaps	%xmm1, 64(%rsp)
  400a90:	0f 29 4c 24 40       	movaps %xmm1,0x40(%rsp)
	movaps	%xmm2, 80(%rsp)
  400a95:	0f 29 54 24 50       	movaps %xmm2,0x50(%rsp)
	movaps	%xmm3, 96(%rsp)
  400a9a:	0f 29 5c 24 60       	movaps %xmm3,0x60(%rsp)
	movaps	%xmm4, 112(%rsp)
  400a9f:	0f 29 64 24 70       	movaps %xmm4,0x70(%rsp)
	movaps	%xmm5, 128(%rsp)
  400aa4:	0f 29 ac 24 80 00 00 	movaps %xmm5,0x80(%rsp)
  400aab:	00 
	movaps	%xmm6, 144(%rsp)
  400aac:	0f 29 b4 24 90 00 00 	movaps %xmm6,0x90(%rsp)
  400ab3:	00 
	movaps	%xmm7, 160(%rsp)
  400ab4:	0f 29 bc 24 a0 00 00 	movaps %xmm7,0xa0(%rsp)
  400abb:	00 
.LBB4_2:                                # %entry
	movq	%r9, 40(%rsp)
  400abc:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
	movq	%r8, 32(%rsp)
  400ac1:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
	movq	%rcx, 24(%rsp)
  400ac6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
	movq	%rdx, 16(%rsp)
  400acb:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
	movq	%rsi, 8(%rsp)
  400ad0:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	movq	%rdi, 208(%rsp)
  400ad5:	48 89 bc 24 d0 00 00 	mov    %rdi,0xd0(%rsp)
  400adc:	00 
	leaq	(%rsp), %rax
  400add:	48 8d 04 24          	lea    (%rsp),%rax
	movq	%rax, 192(%rsp)
  400ae1:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  400ae8:	00 
	leaq	224(%rsp), %rax
  400ae9:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  400af0:	00 
	movq	%rax, 184(%rsp)
  400af1:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  400af8:	00 
	movl	$48, 180(%rsp)
  400af9:	c7 84 24 b4 00 00 00 	movl   $0x30,0xb4(%rsp)
  400b00:	30 00 00 00 
	movl	$8, 176(%rsp)
  400b04:	c7 84 24 b0 00 00 00 	movl   $0x8,0xb0(%rsp)
  400b0b:	08 00 00 00 
	movq	208(%rsp), %rsi
  400b0f:	48 8b b4 24 d0 00 00 	mov    0xd0(%rsp),%rsi
  400b16:	00 
	movq	libiberty_concat_ptr(%rip), %rdi
  400b17:	48 8b 3d 5a 15 20 00 	mov    0x20155a(%rip),%rdi        # 602078 <libiberty_concat_ptr>
	leaq	176(%rsp), %rdx
  400b1e:	48 8d 94 24 b0 00 00 	lea    0xb0(%rsp),%rdx
  400b25:	00 
	callq	vconcat_copy
  400b26:	e8 a5 fe ff ff       	callq  4009d0 <vconcat_copy>
	movq	libiberty_concat_ptr(%rip), %rax
  400b2b:	48 8b 05 46 15 20 00 	mov    0x201546(%rip),%rax        # 602078 <libiberty_concat_ptr>
	addq	$216, %rsp
  400b32:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
	ret
  400b39:	c3                   	retq   
  400b3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400b40 <concat>:
	.align	16, 0x90
	.type	concat,@function
concat:                                 # @concat
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
  400b40:	41 56                	push   %r14
.Ltmp18:
	.cfi_def_cfa_offset 16
	pushq	%rbx
  400b42:	53                   	push   %rbx
.Ltmp19:
	.cfi_def_cfa_offset 24
	subq	$248, %rsp
  400b43:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
	.cfi_def_cfa_offset 272
.Ltmp21:
	.cfi_offset %rbx, -24
.Ltmp22:
	.cfi_offset %r14, -16
	testb	%al, %al
  400b4a:	84 c0                	test   %al,%al
	je	.LBB5_2
  400b4c:	74 31                	je     400b7f <concat+0x3f>
# BB#1:                                 # %entry
	movaps	%xmm0, 48(%rsp)
  400b4e:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
	movaps	%xmm1, 64(%rsp)
  400b53:	0f 29 4c 24 40       	movaps %xmm1,0x40(%rsp)
	movaps	%xmm2, 80(%rsp)
  400b58:	0f 29 54 24 50       	movaps %xmm2,0x50(%rsp)
	movaps	%xmm3, 96(%rsp)
  400b5d:	0f 29 5c 24 60       	movaps %xmm3,0x60(%rsp)
	movaps	%xmm4, 112(%rsp)
  400b62:	0f 29 64 24 70       	movaps %xmm4,0x70(%rsp)
	movaps	%xmm5, 128(%rsp)
  400b67:	0f 29 ac 24 80 00 00 	movaps %xmm5,0x80(%rsp)
  400b6e:	00 
	movaps	%xmm6, 144(%rsp)
  400b6f:	0f 29 b4 24 90 00 00 	movaps %xmm6,0x90(%rsp)
  400b76:	00 
	movaps	%xmm7, 160(%rsp)
  400b77:	0f 29 bc 24 a0 00 00 	movaps %xmm7,0xa0(%rsp)
  400b7e:	00 
.LBB5_2:                                # %entry
	movq	%r9, 40(%rsp)
  400b7f:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
	movq	%r8, 32(%rsp)
  400b84:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
	movq	%rcx, 24(%rsp)
  400b89:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
	movq	%rdx, 16(%rsp)
  400b8e:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
	movq	%rsi, 8(%rsp)
  400b93:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	movq	%rdi, 240(%rsp)
  400b98:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  400b9f:	00 
	leaq	(%rsp), %r14
  400ba0:	4c 8d 34 24          	lea    (%rsp),%r14
	movq	%r14, 224(%rsp)
  400ba4:	4c 89 b4 24 e0 00 00 	mov    %r14,0xe0(%rsp)
  400bab:	00 
	leaq	272(%rsp), %rbx
  400bac:	48 8d 9c 24 10 01 00 	lea    0x110(%rsp),%rbx
  400bb3:	00 
	movq	%rbx, 216(%rsp)
  400bb4:	48 89 9c 24 d8 00 00 	mov    %rbx,0xd8(%rsp)
  400bbb:	00 
	movl	$48, 212(%rsp)
  400bbc:	c7 84 24 d4 00 00 00 	movl   $0x30,0xd4(%rsp)
  400bc3:	30 00 00 00 
	movl	$8, 208(%rsp)
  400bc7:	c7 84 24 d0 00 00 00 	movl   $0x8,0xd0(%rsp)
  400bce:	08 00 00 00 
	movq	240(%rsp), %rdi
  400bd2:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  400bd9:	00 
	leaq	208(%rsp), %rsi
  400bda:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  400be1:	00 
	callq	vconcat_length
  400be2:	e8 99 fc ff ff       	callq  400880 <vconcat_length>
	leaq	1(%rax), %rdi
  400be7:	48 8d 78 01          	lea    0x1(%rax),%rdi
	callq	xmalloc
  400beb:	e8 20 03 00 00       	callq  400f10 <xmalloc>
	leaq	176(%rsp), %rdx
  400bf0:	48 8d 94 24 b0 00 00 	lea    0xb0(%rsp),%rdx
  400bf7:	00 
	movq	%rax, 232(%rsp)
  400bf8:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  400bff:	00 
	movq	%r14, 192(%rsp)
  400c00:	4c 89 b4 24 c0 00 00 	mov    %r14,0xc0(%rsp)
  400c07:	00 
	movq	%rbx, 184(%rsp)
  400c08:	48 89 9c 24 b8 00 00 	mov    %rbx,0xb8(%rsp)
  400c0f:	00 
	movl	$48, 180(%rsp)
  400c10:	c7 84 24 b4 00 00 00 	movl   $0x30,0xb4(%rsp)
  400c17:	30 00 00 00 
	movl	$8, 176(%rsp)
  400c1b:	c7 84 24 b0 00 00 00 	movl   $0x8,0xb0(%rsp)
  400c22:	08 00 00 00 
	movq	240(%rsp), %rsi
  400c26:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  400c2d:	00 
	movq	232(%rsp), %rdi
  400c2e:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  400c35:	00 
	callq	vconcat_copy
  400c36:	e8 95 fd ff ff       	callq  4009d0 <vconcat_copy>
	movq	232(%rsp), %rax
  400c3b:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  400c42:	00 
	addq	$248, %rsp
  400c43:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
	popq	%rbx
  400c4a:	5b                   	pop    %rbx
	popq	%r14
  400c4b:	41 5e                	pop    %r14
	ret
  400c4d:	c3                   	retq   
  400c4e:	66 90                	xchg   %ax,%ax

0000000000400c50 <reconcat>:
	.align	16, 0x90
	.type	reconcat,@function
reconcat:                               # @reconcat
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
  400c50:	41 56                	push   %r14
.Ltmp27:
	.cfi_def_cfa_offset 16
	pushq	%rbx
  400c52:	53                   	push   %rbx
.Ltmp28:
	.cfi_def_cfa_offset 24
	subq	$264, %rsp              # imm = 0x108
  400c53:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
	.cfi_def_cfa_offset 288
.Ltmp30:
	.cfi_offset %rbx, -24
.Ltmp31:
	.cfi_offset %r14, -16
	testb	%al, %al
  400c5a:	84 c0                	test   %al,%al
	je	.LBB6_2
  400c5c:	74 31                	je     400c8f <reconcat+0x3f>
# BB#1:                                 # %entry
	movaps	%xmm0, 48(%rsp)
  400c5e:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
	movaps	%xmm1, 64(%rsp)
  400c63:	0f 29 4c 24 40       	movaps %xmm1,0x40(%rsp)
	movaps	%xmm2, 80(%rsp)
  400c68:	0f 29 54 24 50       	movaps %xmm2,0x50(%rsp)
	movaps	%xmm3, 96(%rsp)
  400c6d:	0f 29 5c 24 60       	movaps %xmm3,0x60(%rsp)
	movaps	%xmm4, 112(%rsp)
  400c72:	0f 29 64 24 70       	movaps %xmm4,0x70(%rsp)
	movaps	%xmm5, 128(%rsp)
  400c77:	0f 29 ac 24 80 00 00 	movaps %xmm5,0x80(%rsp)
  400c7e:	00 
	movaps	%xmm6, 144(%rsp)
  400c7f:	0f 29 b4 24 90 00 00 	movaps %xmm6,0x90(%rsp)
  400c86:	00 
	movaps	%xmm7, 160(%rsp)
  400c87:	0f 29 bc 24 a0 00 00 	movaps %xmm7,0xa0(%rsp)
  400c8e:	00 
.LBB6_2:                                # %entry
	movq	%r9, 40(%rsp)
  400c8f:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
	movq	%r8, 32(%rsp)
  400c94:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
	movq	%rcx, 24(%rsp)
  400c99:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
	movq	%rdx, 16(%rsp)
  400c9e:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
	movq	%rdi, 256(%rsp)
  400ca3:	48 89 bc 24 00 01 00 	mov    %rdi,0x100(%rsp)
  400caa:	00 
	movq	%rsi, 248(%rsp)
  400cab:	48 89 b4 24 f8 00 00 	mov    %rsi,0xf8(%rsp)
  400cb2:	00 
	leaq	(%rsp), %r14
  400cb3:	4c 8d 34 24          	lea    (%rsp),%r14
	movq	%r14, 224(%rsp)
  400cb7:	4c 89 b4 24 e0 00 00 	mov    %r14,0xe0(%rsp)
  400cbe:	00 
	leaq	288(%rsp), %rbx
  400cbf:	48 8d 9c 24 20 01 00 	lea    0x120(%rsp),%rbx
  400cc6:	00 
	movq	%rbx, 216(%rsp)
  400cc7:	48 89 9c 24 d8 00 00 	mov    %rbx,0xd8(%rsp)
  400cce:	00 
	movl	$48, 212(%rsp)
  400ccf:	c7 84 24 d4 00 00 00 	movl   $0x30,0xd4(%rsp)
  400cd6:	30 00 00 00 
	movl	$16, 208(%rsp)
  400cda:	c7 84 24 d0 00 00 00 	movl   $0x10,0xd0(%rsp)
  400ce1:	10 00 00 00 
	movq	248(%rsp), %rdi
  400ce5:	48 8b bc 24 f8 00 00 	mov    0xf8(%rsp),%rdi
  400cec:	00 
	leaq	208(%rsp), %rsi
  400ced:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  400cf4:	00 
	callq	vconcat_length
  400cf5:	e8 86 fb ff ff       	callq  400880 <vconcat_length>
	leaq	1(%rax), %rdi
  400cfa:	48 8d 78 01          	lea    0x1(%rax),%rdi
	callq	xmalloc
  400cfe:	e8 0d 02 00 00       	callq  400f10 <xmalloc>
	leaq	176(%rsp), %rdx
  400d03:	48 8d 94 24 b0 00 00 	lea    0xb0(%rsp),%rdx
  400d0a:	00 
	movq	%rax, 240(%rsp)
  400d0b:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  400d12:	00 
	movq	%r14, 192(%rsp)
  400d13:	4c 89 b4 24 c0 00 00 	mov    %r14,0xc0(%rsp)
  400d1a:	00 
	movq	%rbx, 184(%rsp)
  400d1b:	48 89 9c 24 b8 00 00 	mov    %rbx,0xb8(%rsp)
  400d22:	00 
	movl	$48, 180(%rsp)
  400d23:	c7 84 24 b4 00 00 00 	movl   $0x30,0xb4(%rsp)
  400d2a:	30 00 00 00 
	movl	$16, 176(%rsp)
  400d2e:	c7 84 24 b0 00 00 00 	movl   $0x10,0xb0(%rsp)
  400d35:	10 00 00 00 
	movq	248(%rsp), %rsi
  400d39:	48 8b b4 24 f8 00 00 	mov    0xf8(%rsp),%rsi
  400d40:	00 
	movq	240(%rsp), %rdi
  400d41:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  400d48:	00 
	callq	vconcat_copy
  400d49:	e8 82 fc ff ff       	callq  4009d0 <vconcat_copy>
	cmpq	$0, 256(%rsp)
  400d4e:	48 83 bc 24 00 01 00 	cmpq   $0x0,0x100(%rsp)
  400d55:	00 00 
	je	.LBB6_4
  400d57:	74 0d                	je     400d66 <reconcat+0x116>
# BB#3:                                 # %if.then
	movq	256(%rsp), %rdi
  400d59:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
  400d60:	00 
	callq	free
  400d61:	e8 aa f8 ff ff       	callq  400610 <free@plt>
.LBB6_4:                                # %if.end
	movq	240(%rsp), %rax
  400d66:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  400d6d:	00 
	addq	$264, %rsp              # imm = 0x108
  400d6e:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
	popq	%rbx
  400d75:	5b                   	pop    %rbx
	popq	%r14
  400d76:	41 5e                	pop    %r14
	ret
  400d78:	c3                   	retq   
  400d79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400d80 <main>:
	.align	16, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
  400d80:	50                   	push   %rax
.Ltmp34:
	.cfi_def_cfa_offset 16
	movl	$0, 4(%rsp)
  400d81:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  400d88:	00 
	xorl	%edi, %edi
  400d89:	31 ff                	xor    %edi,%edi
	xorl	%eax, %eax
  400d8b:	31 c0                	xor    %eax,%eax
	callq	concat
  400d8d:	e8 ae fd ff ff       	callq  400b40 <concat>
	movl	$.L.str, %edi
  400d92:	bf d4 10 40 00       	mov    $0x4010d4,%edi
	movq	%rax, %rsi
  400d97:	48 89 c6             	mov    %rax,%rsi
	xorl	%eax, %eax
  400d9a:	31 c0                	xor    %eax,%eax
	callq	printf
  400d9c:	e8 8f f8 ff ff       	callq  400630 <printf@plt>
	movl	$.L.str2, %edi
  400da1:	bf eb 10 40 00       	mov    $0x4010eb,%edi
	xorl	%esi, %esi
  400da6:	31 f6                	xor    %esi,%esi
	xorl	%eax, %eax
  400da8:	31 c0                	xor    %eax,%eax
	callq	concat
  400daa:	e8 91 fd ff ff       	callq  400b40 <concat>
	movl	$.L.str1, %edi
  400daf:	bf df 10 40 00       	mov    $0x4010df,%edi
	movq	%rax, %rsi
  400db4:	48 89 c6             	mov    %rax,%rsi
	xorl	%eax, %eax
  400db7:	31 c0                	xor    %eax,%eax
	callq	printf
  400db9:	e8 72 f8 ff ff       	callq  400630 <printf@plt>
	movl	$.L.str2, %edi
  400dbe:	bf eb 10 40 00       	mov    $0x4010eb,%edi
	movl	$.L.str4, %esi
  400dc3:	be 1a 11 40 00       	mov    $0x40111a,%esi
	xorl	%edx, %edx
  400dc8:	31 d2                	xor    %edx,%edx
	xorl	%eax, %eax
  400dca:	31 c0                	xor    %eax,%eax
	callq	concat
  400dcc:	e8 6f fd ff ff       	callq  400b40 <concat>
	movl	$.L.str3, %edi
  400dd1:	bf ed 10 40 00       	mov    $0x4010ed,%edi
	movq	%rax, %rsi
  400dd6:	48 89 c6             	mov    %rax,%rsi
	xorl	%eax, %eax
  400dd9:	31 c0                	xor    %eax,%eax
	callq	printf
  400ddb:	e8 50 f8 ff ff       	callq  400630 <printf@plt>
	movl	$.L.str2, %edi
  400de0:	bf eb 10 40 00       	mov    $0x4010eb,%edi
	movl	$.L.str4, %esi
  400de5:	be 1a 11 40 00       	mov    $0x40111a,%esi
	movl	$.L.str6, %edx
  400dea:	ba 08 11 40 00       	mov    $0x401108,%edx
	xorl	%ecx, %ecx
  400def:	31 c9                	xor    %ecx,%ecx
	xorl	%eax, %eax
  400df1:	31 c0                	xor    %eax,%eax
	callq	concat
  400df3:	e8 48 fd ff ff       	callq  400b40 <concat>
	movl	$.L.str5, %edi
  400df8:	bf fa 10 40 00       	mov    $0x4010fa,%edi
	movq	%rax, %rsi
  400dfd:	48 89 c6             	mov    %rax,%rsi
	xorl	%eax, %eax
  400e00:	31 c0                	xor    %eax,%eax
	callq	printf
  400e02:	e8 29 f8 ff ff       	callq  400630 <printf@plt>
	movl	$.L.str8, %edi
  400e07:	bf 19 11 40 00       	mov    $0x401119,%edi
	movl	$.L.str9, %esi
  400e0c:	be 41 11 40 00       	mov    $0x401141,%esi
	xorl	%edx, %edx
  400e11:	31 d2                	xor    %edx,%edx
	xorl	%eax, %eax
  400e13:	31 c0                	xor    %eax,%eax
	callq	concat
  400e15:	e8 26 fd ff ff       	callq  400b40 <concat>
	movl	$.L.str7, %edi
  400e1a:	bf 0a 11 40 00       	mov    $0x40110a,%edi
	movq	%rax, %rsi
  400e1f:	48 89 c6             	mov    %rax,%rsi
	xorl	%eax, %eax
  400e22:	31 c0                	xor    %eax,%eax
	callq	printf
  400e24:	e8 07 f8 ff ff       	callq  400630 <printf@plt>
	movl	$.L.str8, %edi
  400e29:	bf 19 11 40 00       	mov    $0x401119,%edi
	movl	$.L.str6, %esi
  400e2e:	be 08 11 40 00       	mov    $0x401108,%esi
	movl	$.L.str11, %edx
  400e33:	ba 2c 11 40 00       	mov    $0x40112c,%edx
	xorl	%ecx, %ecx
  400e38:	31 c9                	xor    %ecx,%ecx
	xorl	%eax, %eax
  400e3a:	31 c0                	xor    %eax,%eax
	callq	concat
  400e3c:	e8 ff fc ff ff       	callq  400b40 <concat>
	movl	$.L.str10, %edi
  400e41:	bf 1c 11 40 00       	mov    $0x40111c,%edi
	movq	%rax, %rsi
  400e46:	48 89 c6             	mov    %rax,%rsi
	xorl	%eax, %eax
  400e49:	31 c0                	xor    %eax,%eax
	callq	printf
  400e4b:	e8 e0 f7 ff ff       	callq  400630 <printf@plt>
	movl	$.L.str13, %edi
  400e50:	bf de 10 40 00       	mov    $0x4010de,%edi
	movl	$.L.str2, %esi
  400e55:	be eb 10 40 00       	mov    $0x4010eb,%esi
	movl	$.L.str13, %edx
  400e5a:	ba de 10 40 00       	mov    $0x4010de,%edx
	movl	$.L.str14, %ecx
  400e5f:	b9 40 11 40 00       	mov    $0x401140,%ecx
	movl	$.L.str15, %r8d
  400e64:	41 b8 44 11 40 00    	mov    $0x401144,%r8d
	xorl	%r9d, %r9d
  400e6a:	45 31 c9             	xor    %r9d,%r9d
	xorl	%eax, %eax
  400e6d:	31 c0                	xor    %eax,%eax
	callq	concat
  400e6f:	e8 cc fc ff ff       	callq  400b40 <concat>
	movl	$.L.str12, %edi
  400e74:	bf 2f 11 40 00       	mov    $0x40112f,%edi
	movq	%rax, %rsi
  400e79:	48 89 c6             	mov    %rax,%rsi
	xorl	%eax, %eax
  400e7c:	31 c0                	xor    %eax,%eax
	callq	printf
  400e7e:	e8 ad f7 ff ff       	callq  400630 <printf@plt>
	xorl	%eax, %eax
  400e83:	31 c0                	xor    %eax,%eax
	popq	%rdx
  400e85:	5a                   	pop    %rdx
	ret
  400e86:	c3                   	retq   
  400e87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  400e8e:	00 00 

0000000000400e90 <xexit>:
	.align	16, 0x90
	.type	xexit,@function
xexit:                                  # @xexit
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
  400e90:	50                   	push   %rax
.Ltmp37:
	.cfi_def_cfa_offset 16
	movl	%edi, 4(%rsp)
  400e91:	89 7c 24 04          	mov    %edi,0x4(%rsp)
	cmpq	$0, _xexit_cleanup(%rip)
  400e95:	48 83 3d e3 11 20 00 	cmpq   $0x0,0x2011e3(%rip)        # 602080 <_xexit_cleanup>
  400e9c:	00 
	je	.LBB8_2
  400e9d:	74 06                	je     400ea5 <xexit+0x15>
# BB#1:                                 # %if.then
	callq	*_xexit_cleanup(%rip)
  400e9f:	ff 15 db 11 20 00    	callq  *0x2011db(%rip)        # 602080 <_xexit_cleanup>
.LBB8_2:                                # %if.end
	movl	4(%rsp), %edi
  400ea5:	8b 7c 24 04          	mov    0x4(%rsp),%edi
	callq	exit
  400ea9:	e8 f2 f7 ff ff       	callq  4006a0 <exit@plt>
  400eae:	66 90                	xchg   %ax,%ax

0000000000400eb0 <xmalloc_set_program_name>:
	.align	16, 0x90
	.type	xmalloc_set_program_name,@function
xmalloc_set_program_name:               # @xmalloc_set_program_name
	.cfi_startproc
# BB#0:                                 # %entry
	movq	%rdi, -8(%rsp)
  400eb0:	48 89 7c 24 f8       	mov    %rdi,-0x8(%rsp)
	movq	%rdi, name(%rip)
  400eb5:	48 89 3d a4 11 20 00 	mov    %rdi,0x2011a4(%rip)        # 602060 <name>
	ret
  400ebc:	c3                   	retq   
  400ebd:	0f 1f 00             	nopl   (%rax)

0000000000400ec0 <xmalloc_failed>:
	.align	16, 0x90
	.type	xmalloc_failed,@function
xmalloc_failed:                         # @xmalloc_failed
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
  400ec0:	50                   	push   %rax
.Ltmp41:
	.cfi_def_cfa_offset 16
	movq	%rdi, %rax
  400ec1:	48 89 f8             	mov    %rdi,%rax
	movq	%rax, (%rsp)
  400ec4:	48 89 04 24          	mov    %rax,(%rsp)
	movl	$.L.str117, %esi
  400ec8:	be 67 11 40 00       	mov    $0x401167,%esi
	movl	$.L.str218, %ecx
  400ecd:	b9 de 10 40 00       	mov    $0x4010de,%ecx
	movq	name(%rip), %rdx
  400ed2:	48 8b 15 87 11 20 00 	mov    0x201187(%rip),%rdx        # 602060 <name>
	movsbl	(%rdx), %edi
  400ed9:	0f be 3a             	movsbl (%rdx),%edi
	testl	%edi, %edi
  400edc:	85 ff                	test   %edi,%edi
	cmovneq	%rsi, %rcx
  400ede:	48 0f 45 ce          	cmovne %rsi,%rcx
	movq	stderr(%rip), %rdi
  400ee2:	48 8b 3d 7f 11 20 00 	mov    0x20117f(%rip),%rdi        # 602068 <__bss_start>
	movl	$.L.str16, %esi
  400ee9:	be 47 11 40 00       	mov    $0x401147,%esi
	movq	%rax, %r8
  400eee:	49 89 c0             	mov    %rax,%r8
	xorl	%eax, %eax
  400ef1:	31 c0                	xor    %eax,%eax
	callq	fprintf
  400ef3:	e8 68 f7 ff ff       	callq  400660 <fprintf@plt>
	movl	$1, %edi
  400ef8:	bf 01 00 00 00       	mov    $0x1,%edi
	callq	xexit
  400efd:	e8 8e ff ff ff       	callq  400e90 <xexit>
  400f02:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  400f09:	1f 84 00 00 00 00 00 

0000000000400f10 <xmalloc>:
	.align	16, 0x90
	.type	xmalloc,@function
xmalloc:                                # @xmalloc
	.cfi_startproc
# BB#0:                                 # %entry
	subq	$24, %rsp
  400f10:	48 83 ec 18          	sub    $0x18,%rsp
.Ltmp44:
	.cfi_def_cfa_offset 32
	movq	%rdi, 16(%rsp)
  400f14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
	testq	%rdi, %rdi
  400f19:	48 85 ff             	test   %rdi,%rdi
	jne	.LBB11_2
  400f1c:	75 09                	jne    400f27 <xmalloc+0x17>
# BB#1:                                 # %if.then
	movq	$1, 16(%rsp)
  400f1e:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  400f25:	00 00 
.LBB11_2:                               # %if.end
	movq	16(%rsp), %rdi
  400f27:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
	callq	malloc
  400f2c:	e8 4f f7 ff ff       	callq  400680 <malloc@plt>
	movq	%rax, 8(%rsp)
  400f31:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	testq	%rax, %rax
  400f36:	48 85 c0             	test   %rax,%rax
	je	.LBB11_4
  400f39:	74 0a                	je     400f45 <xmalloc+0x35>
# BB#3:                                 # %if.end2
	movq	8(%rsp), %rax
  400f3b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	addq	$24, %rsp
  400f40:	48 83 c4 18          	add    $0x18,%rsp
	ret
  400f44:	c3                   	retq   
.LBB11_4:                               # %if.then1
	movq	16(%rsp), %rax
  400f45:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
	movq	%rax, %rdi
  400f4a:	48 89 c7             	mov    %rax,%rdi
	callq	xmalloc_failed
  400f4d:	e8 6e ff ff ff       	callq  400ec0 <xmalloc_failed>
  400f52:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  400f59:	1f 84 00 00 00 00 00 

0000000000400f60 <xcalloc>:
	.align	16, 0x90
	.type	xcalloc,@function
xcalloc:                                # @xcalloc
	.cfi_startproc
# BB#0:                                 # %entry
	subq	$24, %rsp
  400f60:	48 83 ec 18          	sub    $0x18,%rsp
.Ltmp47:
	.cfi_def_cfa_offset 32
	movq	%rdi, 16(%rsp)
  400f64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
	movq	%rsi, 8(%rsp)
  400f69:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	cmpq	$0, 16(%rsp)
  400f6e:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
	je	.LBB12_2
  400f74:	74 08                	je     400f7e <xcalloc+0x1e>
# BB#1:                                 # %lor.lhs.false
	cmpq	$0, 8(%rsp)
  400f76:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
	jne	.LBB12_3
  400f7c:	75 12                	jne    400f90 <xcalloc+0x30>
.LBB12_2:                               # %if.then
	movq	$1, 8(%rsp)
  400f7e:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  400f85:	00 00 
	movq	$1, 16(%rsp)
  400f87:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  400f8e:	00 00 
.LBB12_3:                               # %if.end
	movq	8(%rsp), %rsi
  400f90:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
	movq	16(%rsp), %rdi
  400f95:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
	callq	calloc
  400f9a:	e8 b1 f6 ff ff       	callq  400650 <calloc@plt>
	movq	%rax, (%rsp)
  400f9f:	48 89 04 24          	mov    %rax,(%rsp)
	testq	%rax, %rax
  400fa3:	48 85 c0             	test   %rax,%rax
	je	.LBB12_5
  400fa6:	74 09                	je     400fb1 <xcalloc+0x51>
# BB#4:                                 # %if.end3
	movq	(%rsp), %rax
  400fa8:	48 8b 04 24          	mov    (%rsp),%rax
	addq	$24, %rsp
  400fac:	48 83 c4 18          	add    $0x18,%rsp
	ret
  400fb0:	c3                   	retq   
.LBB12_5:                               # %if.then2
	movq	16(%rsp), %rax
  400fb1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
	imulq	8(%rsp), %rax
  400fb6:	48 0f af 44 24 08    	imul   0x8(%rsp),%rax
	movq	%rax, %rdi
  400fbc:	48 89 c7             	mov    %rax,%rdi
	callq	xmalloc_failed
  400fbf:	e8 fc fe ff ff       	callq  400ec0 <xmalloc_failed>
  400fc4:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%rax,%rax,1)
  400fcb:	00 00 00 00 00 

0000000000400fd0 <xrealloc>:
	.align	16, 0x90
	.type	xrealloc,@function
xrealloc:                               # @xrealloc
	.cfi_startproc
# BB#0:                                 # %entry
	subq	$24, %rsp
  400fd0:	48 83 ec 18          	sub    $0x18,%rsp
.Ltmp50:
	.cfi_def_cfa_offset 32
	movq	%rdi, 16(%rsp)
  400fd4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
	movq	%rsi, 8(%rsp)
  400fd9:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	testq	%rsi, %rsi
  400fde:	48 85 f6             	test   %rsi,%rsi
	jne	.LBB13_2
  400fe1:	75 09                	jne    400fec <xrealloc+0x1c>
# BB#1:                                 # %if.then
	movq	$1, 8(%rsp)
  400fe3:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  400fea:	00 00 
.LBB13_2:                               # %if.end
	cmpq	$0, 16(%rsp)
  400fec:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
	je	.LBB13_3
  400ff2:	74 11                	je     401005 <xrealloc+0x35>
# BB#4:                                 # %if.else
	movq	8(%rsp), %rsi
  400ff4:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
	movq	16(%rsp), %rdi
  400ff9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
	callq	realloc
  400ffe:	e8 8d f6 ff ff       	callq  400690 <realloc@plt>
	jmp	.LBB13_5
  401003:	eb 0a                	jmp    40100f <xrealloc+0x3f>
.LBB13_3:                               # %if.then1
	movq	8(%rsp), %rdi
  401005:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
	callq	malloc
  40100a:	e8 71 f6 ff ff       	callq  400680 <malloc@plt>
.LBB13_5:                               # %if.end3
	movq	%rax, (%rsp)
  40100f:	48 89 04 24          	mov    %rax,(%rsp)
	cmpq	$0, (%rsp)
  401013:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
	je	.LBB13_7
  401018:	74 09                	je     401023 <xrealloc+0x53>
# BB#6:                                 # %if.end6
	movq	(%rsp), %rax
  40101a:	48 8b 04 24          	mov    (%rsp),%rax
	addq	$24, %rsp
  40101e:	48 83 c4 18          	add    $0x18,%rsp
	ret
  401022:	c3                   	retq   
.LBB13_7:                               # %if.then5
	movq	8(%rsp), %rax
  401023:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	movq	%rax, %rdi
  401028:	48 89 c7             	mov    %rax,%rdi
	callq	xmalloc_failed
  40102b:	e8 90 fe ff ff       	callq  400ec0 <xmalloc_failed>

0000000000401030 <__libc_csu_init>:
  401030:	48 89 6c 24 d8       	mov    %rbp,-0x28(%rsp)
  401035:	4c 89 64 24 e0       	mov    %r12,-0x20(%rsp)
  40103a:	48 8d 2d bf 0d 20 00 	lea    0x200dbf(%rip),%rbp        # 601e00 <__init_array_end>
  401041:	4c 8d 25 b0 0d 20 00 	lea    0x200db0(%rip),%r12        # 601df8 <__frame_dummy_init_array_entry>
  401048:	4c 89 6c 24 e8       	mov    %r13,-0x18(%rsp)
  40104d:	4c 89 74 24 f0       	mov    %r14,-0x10(%rsp)
  401052:	4c 89 7c 24 f8       	mov    %r15,-0x8(%rsp)
  401057:	48 89 5c 24 d0       	mov    %rbx,-0x30(%rsp)
  40105c:	48 83 ec 38          	sub    $0x38,%rsp
  401060:	4c 29 e5             	sub    %r12,%rbp
  401063:	41 89 fd             	mov    %edi,%r13d
  401066:	49 89 f6             	mov    %rsi,%r14
  401069:	48 c1 fd 03          	sar    $0x3,%rbp
  40106d:	49 89 d7             	mov    %rdx,%r15
  401070:	e8 73 f5 ff ff       	callq  4005e8 <_init>
  401075:	48 85 ed             	test   %rbp,%rbp
  401078:	74 1c                	je     401096 <__libc_csu_init+0x66>
  40107a:	31 db                	xor    %ebx,%ebx
  40107c:	0f 1f 40 00          	nopl   0x0(%rax)
  401080:	4c 89 fa             	mov    %r15,%rdx
  401083:	4c 89 f6             	mov    %r14,%rsi
  401086:	44 89 ef             	mov    %r13d,%edi
  401089:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40108d:	48 83 c3 01          	add    $0x1,%rbx
  401091:	48 39 eb             	cmp    %rbp,%rbx
  401094:	75 ea                	jne    401080 <__libc_csu_init+0x50>
  401096:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40109b:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  4010a0:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  4010a5:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
  4010aa:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
  4010af:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
  4010b4:	48 83 c4 38          	add    $0x38,%rsp
  4010b8:	c3                   	retq   
  4010b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004010c0 <__libc_csu_fini>:
  4010c0:	f3 c3                	repz retq 
  4010c2:	90                   	nop
  4010c3:	90                   	nop

Disassembly of section .fini:

00000000004010c4 <_fini>:
  4010c4:	48 83 ec 08          	sub    $0x8,%rsp
  4010c8:	48 83 c4 08          	add    $0x8,%rsp
  4010cc:	c3                   	retq   

Disassembly of section .rodata:

00000000004010d0 <_IO_stdin_used>:
  4010d0:	01 00                	add    %eax,(%rax)
  4010d2:	02 00                	add    (%rax),%al
  4010d4:	22 22                	and    (%rdx),%ah
  4010d6:	20 3d 20 22 25 73    	and    %bh,0x73252220(%rip)        # 736532fc <_end+0x73051274>
  4010dc:	22 0a                	and    (%rdx),%cl
  4010de:	00 22                	add    %ah,(%rdx)
  4010e0:	61                   	(bad)  
  4010e1:	22 20                	and    (%rax),%ah
  4010e3:	3d 20 22 25 73       	cmp    $0x73252220,%eax
  4010e8:	22 0a                	and    (%rdx),%cl
  4010ea:	00 61 00             	add    %ah,0x0(%rcx)
  4010ed:	22 61 62             	and    0x62(%rcx),%ah
  4010f0:	22 20                	and    (%rax),%ah
  4010f2:	3d 20 22 25 73       	cmp    $0x73252220,%eax
  4010f7:	22 0a                	and    (%rdx),%cl
  4010f9:	00 22                	add    %ah,(%rdx)
  4010fb:	61                   	(bad)  
  4010fc:	62                   	(bad)  
  4010fd:	63 22                	movslq (%rdx),%esp
  4010ff:	20 3d 20 22 25 73    	and    %bh,0x73252220(%rip)        # 73653325 <_end+0x7305129d>
  401105:	22 0a                	and    (%rdx),%cl
  401107:	00 63 00             	add    %ah,0x0(%rbx)
  40110a:	22 61 62             	and    0x62(%rcx),%ah
  40110d:	63 64 22 20          	movslq 0x20(%rdx,%riz,1),%esp
  401111:	3d 20 22 25 73       	cmp    $0x73252220,%eax
  401116:	22 0a                	and    (%rdx),%cl
  401118:	00 61 62             	add    %ah,0x62(%rcx)
  40111b:	00 22                	add    %ah,(%rdx)
  40111d:	61                   	(bad)  
  40111e:	62                   	(bad)  
  40111f:	63 64 65 22          	movslq 0x22(%rbp,%riz,2),%esp
  401123:	20 3d 20 22 25 73    	and    %bh,0x73252220(%rip)        # 73653349 <_end+0x730512c1>
  401129:	22 0a                	and    (%rdx),%cl
  40112b:	00 64 65 00          	add    %ah,0x0(%rbp,%riz,2)
  40112f:	22 61 62             	and    0x62(%rcx),%ah
  401132:	63 64 65 66          	movslq 0x66(%rbp,%riz,2),%esp
  401136:	22 20                	and    (%rax),%ah
  401138:	3d 20 22 25 73       	cmp    $0x73252220,%eax
  40113d:	22 0a                	and    (%rdx),%cl
  40113f:	00 62 63             	add    %ah,0x63(%rdx)
  401142:	64 00 65 66          	add    %ah,%fs:0x66(%rbp)
  401146:	00 0a                	add    %cl,(%rdx)
  401148:	25 73 25 73 43       	and    $0x43732573,%eax
  40114d:	61                   	(bad)  
  40114e:	6e                   	outsb  %ds:(%rsi),(%dx)
  40114f:	6e                   	outsb  %ds:(%rsi),(%dx)
  401150:	6f                   	outsl  %ds:(%rsi),(%dx)
  401151:	74 20                	je     401173 <_IO_stdin_used+0xa3>
  401153:	61                   	(bad)  
  401154:	6c                   	insb   (%dx),%es:(%rdi)
  401155:	6c                   	insb   (%dx),%es:(%rdi)
  401156:	6f                   	outsl  %ds:(%rsi),(%dx)
  401157:	63 61 74             	movslq 0x74(%rcx),%esp
  40115a:	65 20 25 6c 75 20 62 	and    %ah,%gs:0x6220756c(%rip)        # 626086cd <_end+0x62006645>
  401161:	79 74                	jns    4011d7 <_IO_stdin_used+0x107>
  401163:	65                   	gs
  401164:	73 0a                	jae    401170 <_IO_stdin_used+0xa0>
  401166:	00 3a                	add    %bh,(%rdx)
  401168:	20 00                	and    %al,(%rax)

Disassembly of section .eh_frame_hdr:

000000000040116c <.eh_frame_hdr>:
  40116c:	01 1b                	add    %ebx,(%rbx)
  40116e:	03 3b                	add    (%rbx),%edi
  401170:	90                   	nop
  401171:	00 00                	add    %al,(%rax)
  401173:	00 11                	add    %dl,(%rcx)
  401175:	00 00                	add    %al,(%rax)
  401177:	00 94 f4 ff ff ac 00 	add    %dl,0xacffff(%rsp,%rsi,8)
  40117e:	00 00                	add    %al,(%rax)
  401180:	54                   	push   %rsp
  401181:	f6 ff                	idiv   %bh
  401183:	ff d4                	callq  *%rsp
  401185:	00 00                	add    %al,(%rax)
  401187:	00 14 f7             	add    %dl,(%rdi,%rsi,8)
  40118a:	ff                   	(bad)  
  40118b:	ff ec                	ljmpq  *<internal disassembler error>
  40118d:	00 00                	add    %al,(%rax)
  40118f:	00 94 f7 ff ff 04 01 	add    %dl,0x104ffff(%rdi,%rsi,8)
  401196:	00 00                	add    %al,(%rax)
  401198:	64                   	fs
  401199:	f8                   	clc    
  40119a:	ff                   	(bad)  
  40119b:	ff 1c 01             	lcallq *(%rcx,%rax,1)
  40119e:	00 00                	add    %al,(%rax)
  4011a0:	14 f9                	adc    $0xf9,%al
  4011a2:	ff                   	(bad)  
  4011a3:	ff 34 01             	pushq  (%rcx,%rax,1)
  4011a6:	00 00                	add    %al,(%rax)
  4011a8:	d4                   	(bad)  
  4011a9:	f9                   	stc    
  4011aa:	ff                   	(bad)  
  4011ab:	ff 4c 01 00          	decl   0x0(%rcx,%rax,1)
  4011af:	00 e4                	add    %ah,%ah
  4011b1:	fa                   	cli    
  4011b2:	ff                   	(bad)  
  4011b3:	ff 6c 01 00          	ljmpq  *0x0(%rcx,%rax,1)
  4011b7:	00 14 fc             	add    %dl,(%rsp,%rdi,8)
  4011ba:	ff                   	(bad)  
  4011bb:	ff 8c 01 00 00 24 fd 	decl   -0x2dc0000(%rcx,%rax,1)
  4011c2:	ff                   	(bad)  
  4011c3:	ff a4 01 00 00 44 fd 	jmpq   *-0x2bc0000(%rcx,%rax,1)
  4011ca:	ff                   	(bad)  
  4011cb:	ff                   	(bad)  
  4011cc:	bc 01 00 00 54       	mov    $0x54000001,%esp
  4011d1:	fd                   	std    
  4011d2:	ff                   	(bad)  
  4011d3:	ff d4                	callq  *%rsp
  4011d5:	01 00                	add    %eax,(%rax)
  4011d7:	00 a4 fd ff ff ec 01 	add    %ah,0x1ecffff(%rbp,%rdi,8)
  4011de:	00 00                	add    %al,(%rax)
  4011e0:	f4                   	hlt    
  4011e1:	fd                   	std    
  4011e2:	ff                   	(bad)  
  4011e3:	ff 04 02             	incl   (%rdx,%rax,1)
  4011e6:	00 00                	add    %al,(%rax)
  4011e8:	64                   	fs
  4011e9:	fe                   	(bad)  
  4011ea:	ff                   	(bad)  
  4011eb:	ff 1c 02             	lcallq *(%rdx,%rax,1)
  4011ee:	00 00                	add    %al,(%rax)
  4011f0:	c4                   	(bad)  
  4011f1:	fe                   	(bad)  
  4011f2:	ff                   	(bad)  
  4011f3:	ff 34 02             	pushq  (%rdx,%rax,1)
  4011f6:	00 00                	add    %al,(%rax)
  4011f8:	54                   	push   %rsp
  4011f9:	ff                   	(bad)  
  4011fa:	ff                   	(bad)  
  4011fb:	ff 5c 02 00          	lcallq *0x0(%rdx,%rax,1)
	...

Disassembly of section .eh_frame:

0000000000401200 <__FRAME_END__-0x1e0>:
  401200:	14 00                	adc    $0x0,%al
  401202:	00 00                	add    %al,(%rax)
  401204:	00 00                	add    %al,(%rax)
  401206:	00 00                	add    %al,(%rax)
  401208:	01 7a 52             	add    %edi,0x52(%rdx)
  40120b:	00 01                	add    %al,(%rcx)
  40120d:	78 10                	js     40121f <_IO_stdin_used+0x14f>
  40120f:	01 1b                	add    %ebx,(%rbx)
  401211:	0c 07                	or     $0x7,%al
  401213:	08 90 01 00 00 24    	or     %dl,0x24000001(%rax)
  401219:	00 00                	add    %al,(%rax)
  40121b:	00 1c 00             	add    %bl,(%rax,%rax,1)
  40121e:	00 00                	add    %al,(%rax)
  401220:	e0 f3                	loopne 401215 <_IO_stdin_used+0x145>
  401222:	ff                   	(bad)  
  401223:	ff b0 00 00 00 00    	pushq  0x0(%rax)
  401229:	0e                   	(bad)  
  40122a:	10 46 0e             	adc    %al,0xe(%rsi)
  40122d:	18 4a 0f             	sbb    %cl,0xf(%rdx)
  401230:	0b 77 08             	or     0x8(%rdi),%esi
  401233:	80 00 3f             	addb   $0x3f,(%rax)
  401236:	1a 3b                	sbb    (%rbx),%bh
  401238:	2a 33                	sub    (%rbx),%dh
  40123a:	24 22                	and    $0x22,%al
  40123c:	00 00                	add    %al,(%rax)
  40123e:	00 00                	add    %al,(%rax)
  401240:	14 00                	adc    $0x0,%al
  401242:	00 00                	add    %al,(%rax)
  401244:	44 00 00             	add    %r8b,(%rax)
  401247:	00 78 f5             	add    %bh,-0xb(%rax)
  40124a:	ff                   	(bad)  
  40124b:	ff b4 00 00 00 00 47 	pushq  0x47000000(%rax,%rax,1)
  401252:	0e                   	(bad)  
  401253:	e0 01                	loopne 401256 <_IO_stdin_used+0x186>
  401255:	00 00                	add    %al,(%rax)
  401257:	00 14 00             	add    %dl,(%rax,%rax,1)
  40125a:	00 00                	add    %al,(%rax)
  40125c:	5c                   	pop    %rsp
  40125d:	00 00                	add    %al,(%rax)
  40125f:	00 20                	add    %ah,(%rax)
  401261:	f6 ff                	idiv   %bh
  401263:	ff 75 00             	pushq  0x0(%rbp)
  401266:	00 00                	add    %al,(%rax)
  401268:	00 44 0e 30          	add    %al,0x30(%rsi,%rcx,1)
  40126c:	00 00                	add    %al,(%rax)
  40126e:	00 00                	add    %al,(%rax)
  401270:	14 00                	adc    $0x0,%al
  401272:	00 00                	add    %al,(%rax)
  401274:	74 00                	je     401276 <_IO_stdin_used+0x1a6>
  401276:	00 00                	add    %al,(%rax)
  401278:	88 f6                	mov    %dh,%dh
  40127a:	ff                   	(bad)  
  40127b:	ff c7                	inc    %edi
  40127d:	00 00                	add    %al,(%rax)
  40127f:	00 00                	add    %al,(%rax)
  401281:	47 0e                	rex.RXB (bad) 
  401283:	f0 01 00             	lock add %eax,(%rax)
  401286:	00 00                	add    %al,(%rax)
  401288:	14 00                	adc    $0x0,%al
  40128a:	00 00                	add    %al,(%rax)
  40128c:	8c 00                	mov    %es,(%rax)
  40128e:	00 00                	add    %al,(%rax)
  401290:	40 f7 ff             	rex idiv %edi
  401293:	ff a9 00 00 00 00    	ljmpq  *0x0(%rcx)
  401299:	44 0e                	rex.R (bad) 
  40129b:	40 00 00             	add    %al,(%rax)
  40129e:	00 00                	add    %al,(%rax)
  4012a0:	14 00                	adc    $0x0,%al
  4012a2:	00 00                	add    %al,(%rax)
  4012a4:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
  4012a5:	00 00                	add    %al,(%rax)
  4012a7:	00 d8                	add    %bl,%al
  4012a9:	f7 ff                	idiv   %edi
  4012ab:	ff                   	(bad)  
  4012ac:	ba 00 00 00 00       	mov    $0x0,%edx
  4012b1:	47 0e                	rex.RXB (bad) 
  4012b3:	e0 01                	loopne 4012b6 <_IO_stdin_used+0x1e6>
  4012b5:	00 00                	add    %al,(%rax)
  4012b7:	00 1c 00             	add    %bl,(%rax,%rax,1)
  4012ba:	00 00                	add    %al,(%rax)
  4012bc:	bc 00 00 00 80       	mov    $0x80000000,%esp
  4012c1:	f8                   	clc    
  4012c2:	ff                   	(bad)  
  4012c3:	ff 0e                	decl   (%rsi)
  4012c5:	01 00                	add    %eax,(%rax)
  4012c7:	00 00                	add    %al,(%rax)
  4012c9:	42 0e                	rex.X (bad) 
  4012cb:	10 41 0e             	adc    %al,0xe(%rcx)
  4012ce:	18 47 0e             	sbb    %al,0xe(%rdi)
  4012d1:	90                   	nop
  4012d2:	02 83 03 8e 02 00    	add    0x28e03(%rbx),%al
  4012d8:	1c 00                	sbb    $0x0,%al
  4012da:	00 00                	add    %al,(%rax)
  4012dc:	dc 00                	faddl  (%rax)
  4012de:	00 00                	add    %al,(%rax)
  4012e0:	70 f9                	jo     4012db <_IO_stdin_used+0x20b>
  4012e2:	ff                   	(bad)  
  4012e3:	ff 29                	ljmpq  *(%rcx)
  4012e5:	01 00                	add    %eax,(%rax)
  4012e7:	00 00                	add    %al,(%rax)
  4012e9:	42 0e                	rex.X (bad) 
  4012eb:	10 41 0e             	adc    %al,0xe(%rcx)
  4012ee:	18 47 0e             	sbb    %al,0xe(%rdi)
  4012f1:	a0 02 83 03 8e 02 00 	movabs 0x1400028e038302,%al
  4012f8:	14 00 
  4012fa:	00 00                	add    %al,(%rax)
  4012fc:	fc                   	cld    
  4012fd:	00 00                	add    %al,(%rax)
  4012ff:	00 80 fa ff ff 07    	add    %al,0x7fffffa(%rax)
  401305:	01 00                	add    %eax,(%rax)
  401307:	00 00                	add    %al,(%rax)
  401309:	41 0e                	rex.B (bad) 
  40130b:	10 00                	adc    %al,(%rax)
  40130d:	00 00                	add    %al,(%rax)
  40130f:	00 14 00             	add    %dl,(%rax,%rax,1)
  401312:	00 00                	add    %al,(%rax)
  401314:	14 01                	adc    $0x1,%al
  401316:	00 00                	add    %al,(%rax)
  401318:	78 fb                	js     401315 <_IO_stdin_used+0x245>
  40131a:	ff                   	(bad)  
  40131b:	ff 1e                	lcallq *(%rsi)
  40131d:	00 00                	add    %al,(%rax)
  40131f:	00 00                	add    %al,(%rax)
  401321:	41 0e                	rex.B (bad) 
  401323:	10 00                	adc    %al,(%rax)
  401325:	00 00                	add    %al,(%rax)
  401327:	00 14 00             	add    %dl,(%rax,%rax,1)
  40132a:	00 00                	add    %al,(%rax)
  40132c:	2c 01                	sub    $0x1,%al
  40132e:	00 00                	add    %al,(%rax)
  401330:	80 fb ff             	cmp    $0xff,%bl
  401333:	ff 0d 00 00 00 00    	decl   0x0(%rip)        # 401339 <_IO_stdin_used+0x269>
  401339:	00 00                	add    %al,(%rax)
  40133b:	00 00                	add    %al,(%rax)
  40133d:	00 00                	add    %al,(%rax)
  40133f:	00 14 00             	add    %dl,(%rax,%rax,1)
  401342:	00 00                	add    %al,(%rax)
  401344:	44 01 00             	add    %r8d,(%rax)
  401347:	00 78 fb             	add    %bh,-0x5(%rax)
  40134a:	ff                   	(bad)  
  40134b:	ff 42 00             	incl   0x0(%rdx)
  40134e:	00 00                	add    %al,(%rax)
  401350:	00 41 0e             	add    %al,0xe(%rcx)
  401353:	10 00                	adc    %al,(%rax)
  401355:	00 00                	add    %al,(%rax)
  401357:	00 14 00             	add    %dl,(%rax,%rax,1)
  40135a:	00 00                	add    %al,(%rax)
  40135c:	5c                   	pop    %rsp
  40135d:	01 00                	add    %eax,(%rax)
  40135f:	00 b0 fb ff ff 42    	add    %dh,0x42fffffb(%rax)
  401365:	00 00                	add    %al,(%rax)
  401367:	00 00                	add    %al,(%rax)
  401369:	44 0e                	rex.R (bad) 
  40136b:	20 00                	and    %al,(%rax)
  40136d:	00 00                	add    %al,(%rax)
  40136f:	00 14 00             	add    %dl,(%rax,%rax,1)
  401372:	00 00                	add    %al,(%rax)
  401374:	74 01                	je     401377 <_IO_stdin_used+0x2a7>
  401376:	00 00                	add    %al,(%rax)
  401378:	e8 fb ff ff 64       	callq  65401378 <_end+0x64dff2f0>
  40137d:	00 00                	add    %al,(%rax)
  40137f:	00 00                	add    %al,(%rax)
  401381:	44 0e                	rex.R (bad) 
  401383:	20 00                	and    %al,(%rax)
  401385:	00 00                	add    %al,(%rax)
  401387:	00 14 00             	add    %dl,(%rax,%rax,1)
  40138a:	00 00                	add    %al,(%rax)
  40138c:	8c 01                	mov    %es,(%rcx)
  40138e:	00 00                	add    %al,(%rax)
  401390:	40 fc                	rex cld 
  401392:	ff                   	(bad)  
  401393:	ff 60 00             	jmpq   *0x0(%rax)
  401396:	00 00                	add    %al,(%rax)
  401398:	00 44 0e 20          	add    %al,0x20(%rsi,%rcx,1)
  40139c:	00 00                	add    %al,(%rax)
  40139e:	00 00                	add    %al,(%rax)
  4013a0:	24 00                	and    $0x0,%al
  4013a2:	00 00                	add    %al,(%rax)
  4013a4:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
  4013a5:	01 00                	add    %eax,(%rax)
  4013a7:	00 88 fc ff ff 89    	add    %cl,-0x76000004(%rax)
  4013ad:	00 00                	add    %al,(%rax)
  4013af:	00 00                	add    %al,(%rax)
  4013b1:	51                   	push   %rcx
  4013b2:	8c 05 86 06 5f 0e    	mov    %es,0xe5f0686(%rip)        # e9f1a3e <_end+0xe3ef9b6>
  4013b8:	40 83 07 8f          	rex addl $0xffffff8f,(%rdi)
  4013bc:	02 8e 03 8d 04 02    	add    0x2048d03(%rsi),%cl
  4013c2:	58                   	pop    %rax
  4013c3:	0e                   	(bad)  
  4013c4:	08 00                	or     %al,(%rax)
  4013c6:	00 00                	add    %al,(%rax)
  4013c8:	14 00                	adc    $0x0,%al
  4013ca:	00 00                	add    %al,(%rax)
  4013cc:	cc                   	int3   
  4013cd:	01 00                	add    %eax,(%rax)
  4013cf:	00 f0                	add    %dh,%al
  4013d1:	fc                   	cld    
  4013d2:	ff                   	(bad)  
  4013d3:	ff 02                	incl   (%rdx)
	...

00000000004013e0 <__FRAME_END__>:
  4013e0:	00 00                	add    %al,(%rax)
	...

Disassembly of section .init_array:

0000000000601df8 <__frame_dummy_init_array_entry>:
  601df8:	90                   	nop
  601df9:	07                   	(bad)  
  601dfa:	40 00 00             	add    %al,(%rax)
  601dfd:	00 00                	add    %al,(%rax)
	...

Disassembly of section .fini_array:

0000000000601e00 <__do_global_dtors_aux_fini_array_entry>:
  601e00:	70 07                	jo     601e09 <__JCR_END__+0x1>
  601e02:	40 00 00             	add    %al,(%rax)
  601e05:	00 00                	add    %al,(%rax)
	...

Disassembly of section .jcr:

0000000000601e08 <__JCR_END__>:
	...

Disassembly of section .dynamic:

0000000000601e10 <_DYNAMIC>:
  601e10:	01 00                	add    %eax,(%rax)
  601e12:	00 00                	add    %al,(%rax)
  601e14:	00 00                	add    %al,(%rax)
  601e16:	00 00                	add    %al,(%rax)
  601e18:	10 00                	adc    %al,(%rax)
  601e1a:	00 00                	add    %al,(%rax)
  601e1c:	00 00                	add    %al,(%rax)
  601e1e:	00 00                	add    %al,(%rax)
  601e20:	0c 00                	or     $0x0,%al
  601e22:	00 00                	add    %al,(%rax)
  601e24:	00 00                	add    %al,(%rax)
  601e26:	00 00                	add    %al,(%rax)
  601e28:	e8 05 40 00 00       	callq  605e32 <_end+0x3daa>
  601e2d:	00 00                	add    %al,(%rax)
  601e2f:	00 0d 00 00 00 00    	add    %cl,0x0(%rip)        # 601e35 <_DYNAMIC+0x25>
  601e35:	00 00                	add    %al,(%rax)
  601e37:	00 c4                	add    %al,%ah
  601e39:	10 40 00             	adc    %al,0x0(%rax)
  601e3c:	00 00                	add    %al,(%rax)
  601e3e:	00 00                	add    %al,(%rax)
  601e40:	19 00                	sbb    %eax,(%rax)
  601e42:	00 00                	add    %al,(%rax)
  601e44:	00 00                	add    %al,(%rax)
  601e46:	00 00                	add    %al,(%rax)
  601e48:	f8                   	clc    
  601e49:	1d 60 00 00 00       	sbb    $0x60,%eax
  601e4e:	00 00                	add    %al,(%rax)
  601e50:	1b 00                	sbb    (%rax),%eax
  601e52:	00 00                	add    %al,(%rax)
  601e54:	00 00                	add    %al,(%rax)
  601e56:	00 00                	add    %al,(%rax)
  601e58:	08 00                	or     %al,(%rax)
  601e5a:	00 00                	add    %al,(%rax)
  601e5c:	00 00                	add    %al,(%rax)
  601e5e:	00 00                	add    %al,(%rax)
  601e60:	1a 00                	sbb    (%rax),%al
  601e62:	00 00                	add    %al,(%rax)
  601e64:	00 00                	add    %al,(%rax)
  601e66:	00 00                	add    %al,(%rax)
  601e68:	00 1e                	add    %bl,(%rsi)
  601e6a:	60                   	(bad)  
  601e6b:	00 00                	add    %al,(%rax)
  601e6d:	00 00                	add    %al,(%rax)
  601e6f:	00 1c 00             	add    %bl,(%rax,%rax,1)
  601e72:	00 00                	add    %al,(%rax)
  601e74:	00 00                	add    %al,(%rax)
  601e76:	00 00                	add    %al,(%rax)
  601e78:	08 00                	or     %al,(%rax)
  601e7a:	00 00                	add    %al,(%rax)
  601e7c:	00 00                	add    %al,(%rax)
  601e7e:	00 00                	add    %al,(%rax)
  601e80:	f5                   	cmc    
  601e81:	fe                   	(bad)  
  601e82:	ff 6f 00             	ljmpq  *0x0(%rdi)
  601e85:	00 00                	add    %al,(%rax)
  601e87:	00 98 02 40 00 00    	add    %bl,0x4002(%rax)
  601e8d:	00 00                	add    %al,(%rax)
  601e8f:	00 05 00 00 00 00    	add    %al,0x0(%rip)        # 601e95 <_DYNAMIC+0x85>
  601e95:	00 00                	add    %al,(%rax)
  601e97:	00 f8                	add    %bh,%al
  601e99:	03 40 00             	add    0x0(%rax),%eax
  601e9c:	00 00                	add    %al,(%rax)
  601e9e:	00 00                	add    %al,(%rax)
  601ea0:	06                   	(bad)  
  601ea1:	00 00                	add    %al,(%rax)
  601ea3:	00 00                	add    %al,(%rax)
  601ea5:	00 00                	add    %al,(%rax)
  601ea7:	00 c0                	add    %al,%al
  601ea9:	02 40 00             	add    0x0(%rax),%al
  601eac:	00 00                	add    %al,(%rax)
  601eae:	00 00                	add    %al,(%rax)
  601eb0:	0a 00                	or     (%rax),%al
  601eb2:	00 00                	add    %al,(%rax)
  601eb4:	00 00                	add    %al,(%rax)
  601eb6:	00 00                	add    %al,(%rax)
  601eb8:	80 00 00             	addb   $0x0,(%rax)
  601ebb:	00 00                	add    %al,(%rax)
  601ebd:	00 00                	add    %al,(%rax)
  601ebf:	00 0b                	add    %cl,(%rbx)
  601ec1:	00 00                	add    %al,(%rax)
  601ec3:	00 00                	add    %al,(%rax)
  601ec5:	00 00                	add    %al,(%rax)
  601ec7:	00 18                	add    %bl,(%rax)
  601ec9:	00 00                	add    %al,(%rax)
  601ecb:	00 00                	add    %al,(%rax)
  601ecd:	00 00                	add    %al,(%rax)
  601ecf:	00 15 00 00 00 00    	add    %dl,0x0(%rip)        # 601ed5 <_DYNAMIC+0xc5>
	...
  601edd:	00 00                	add    %al,(%rax)
  601edf:	00 03                	add    %al,(%rbx)
  601ee1:	00 00                	add    %al,(%rax)
  601ee3:	00 00                	add    %al,(%rax)
  601ee5:	00 00                	add    %al,(%rax)
  601ee7:	00 e8                	add    %ch,%al
  601ee9:	1f                   	(bad)  
  601eea:	60                   	(bad)  
  601eeb:	00 00                	add    %al,(%rax)
  601eed:	00 00                	add    %al,(%rax)
  601eef:	00 02                	add    %al,(%rdx)
  601ef1:	00 00                	add    %al,(%rax)
  601ef3:	00 00                	add    %al,(%rax)
  601ef5:	00 00                	add    %al,(%rax)
  601ef7:	00 f0                	add    %dh,%al
  601ef9:	00 00                	add    %al,(%rax)
  601efb:	00 00                	add    %al,(%rax)
  601efd:	00 00                	add    %al,(%rax)
  601eff:	00 14 00             	add    %dl,(%rax,%rax,1)
  601f02:	00 00                	add    %al,(%rax)
  601f04:	00 00                	add    %al,(%rax)
  601f06:	00 00                	add    %al,(%rax)
  601f08:	07                   	(bad)  
  601f09:	00 00                	add    %al,(%rax)
  601f0b:	00 00                	add    %al,(%rax)
  601f0d:	00 00                	add    %al,(%rax)
  601f0f:	00 17                	add    %dl,(%rdi)
  601f11:	00 00                	add    %al,(%rax)
  601f13:	00 00                	add    %al,(%rax)
  601f15:	00 00                	add    %al,(%rax)
  601f17:	00 f8                	add    %bh,%al
  601f19:	04 40                	add    $0x40,%al
  601f1b:	00 00                	add    %al,(%rax)
  601f1d:	00 00                	add    %al,(%rax)
  601f1f:	00 07                	add    %al,(%rdi)
  601f21:	00 00                	add    %al,(%rax)
  601f23:	00 00                	add    %al,(%rax)
  601f25:	00 00                	add    %al,(%rax)
  601f27:	00 c8                	add    %cl,%al
  601f29:	04 40                	add    $0x40,%al
  601f2b:	00 00                	add    %al,(%rax)
  601f2d:	00 00                	add    %al,(%rax)
  601f2f:	00 08                	add    %cl,(%rax)
  601f31:	00 00                	add    %al,(%rax)
  601f33:	00 00                	add    %al,(%rax)
  601f35:	00 00                	add    %al,(%rax)
  601f37:	00 30                	add    %dh,(%rax)
  601f39:	00 00                	add    %al,(%rax)
  601f3b:	00 00                	add    %al,(%rax)
  601f3d:	00 00                	add    %al,(%rax)
  601f3f:	00 09                	add    %cl,(%rcx)
  601f41:	00 00                	add    %al,(%rax)
  601f43:	00 00                	add    %al,(%rax)
  601f45:	00 00                	add    %al,(%rax)
  601f47:	00 18                	add    %bl,(%rax)
  601f49:	00 00                	add    %al,(%rax)
  601f4b:	00 00                	add    %al,(%rax)
  601f4d:	00 00                	add    %al,(%rax)
  601f4f:	00 fe                	add    %bh,%dh
  601f51:	ff                   	(bad)  
  601f52:	ff 6f 00             	ljmpq  *0x0(%rdi)
  601f55:	00 00                	add    %al,(%rax)
  601f57:	00 98 04 40 00 00    	add    %bl,0x4004(%rax)
  601f5d:	00 00                	add    %al,(%rax)
  601f5f:	00 ff                	add    %bh,%bh
  601f61:	ff                   	(bad)  
  601f62:	ff 6f 00             	ljmpq  *0x0(%rdi)
  601f65:	00 00                	add    %al,(%rax)
  601f67:	00 01                	add    %al,(%rcx)
  601f69:	00 00                	add    %al,(%rax)
  601f6b:	00 00                	add    %al,(%rax)
  601f6d:	00 00                	add    %al,(%rax)
  601f6f:	00 f0                	add    %dh,%al
  601f71:	ff                   	(bad)  
  601f72:	ff 6f 00             	ljmpq  *0x0(%rdi)
  601f75:	00 00                	add    %al,(%rax)
  601f77:	00 78 04             	add    %bh,0x4(%rax)
  601f7a:	40 00 00             	add    %al,(%rax)
	...

Disassembly of section .got:

0000000000601fe0 <.got>:
	...

Disassembly of section .got.plt:

0000000000601fe8 <_GLOBAL_OFFSET_TABLE_>:
  601fe8:	10 1e                	adc    %bl,(%rsi)
  601fea:	60                   	(bad)  
	...
  601fff:	00 16                	add    %dl,(%rsi)
  602001:	06                   	(bad)  
  602002:	40 00 00             	add    %al,(%rax)
  602005:	00 00                	add    %al,(%rax)
  602007:	00 26                	add    %ah,(%rsi)
  602009:	06                   	(bad)  
  60200a:	40 00 00             	add    %al,(%rax)
  60200d:	00 00                	add    %al,(%rax)
  60200f:	00 36                	add    %dh,(%rsi)
  602011:	06                   	(bad)  
  602012:	40 00 00             	add    %al,(%rax)
  602015:	00 00                	add    %al,(%rax)
  602017:	00 46 06             	add    %al,0x6(%rsi)
  60201a:	40 00 00             	add    %al,(%rax)
  60201d:	00 00                	add    %al,(%rax)
  60201f:	00 56 06             	add    %dl,0x6(%rsi)
  602022:	40 00 00             	add    %al,(%rax)
  602025:	00 00                	add    %al,(%rax)
  602027:	00 66 06             	add    %ah,0x6(%rsi)
  60202a:	40 00 00             	add    %al,(%rax)
  60202d:	00 00                	add    %al,(%rax)
  60202f:	00 76 06             	add    %dh,0x6(%rsi)
  602032:	40 00 00             	add    %al,(%rax)
  602035:	00 00                	add    %al,(%rax)
  602037:	00 86 06 40 00 00    	add    %al,0x4006(%rsi)
  60203d:	00 00                	add    %al,(%rax)
  60203f:	00 96 06 40 00 00    	add    %dl,0x4006(%rsi)
  602045:	00 00                	add    %al,(%rax)
  602047:	00 a6 06 40 00 00    	add    %ah,0x4006(%rsi)
  60204d:	00 00                	add    %al,(%rax)
	...

Disassembly of section .data:

0000000000602050 <__data_start>:
	...

0000000000602058 <__dso_handle>:
	...

0000000000602060 <name>:
  602060:	de 10                	ficom  (%rax)
  602062:	40 00 00             	add    %al,(%rax)
  602065:	00 00                	add    %al,(%rax)
	...

Disassembly of section .bss:

0000000000602068 <stderr@@GLIBC_2.2.5>:
	...

0000000000602070 <completed.6976>:
	...

0000000000602078 <libiberty_concat_ptr>:
	...

0000000000602080 <_xexit_cleanup>:
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
   0:	47                   	rex.RXB
   1:	43                   	rex.XB
   2:	43 3a 20             	rex.XB cmp (%r8),%spl
   5:	28 55 62             	sub    %dl,0x62(%rbp)
   8:	75 6e                	jne    78 <_init-0x400570>
   a:	74 75                	je     81 <_init-0x400567>
   c:	20 34 2e             	and    %dh,(%rsi,%rbp,1)
   f:	38 2e                	cmp    %ch,(%rsi)
  11:	31 2d 32 75 62 75    	xor    %ebp,0x75627532(%rip)        # 75627549 <_end+0x750254c1>
  17:	6e                   	outsb  %ds:(%rsi),(%dx)
  18:	74 75                	je     8f <_init-0x400559>
  1a:	31 7e 31             	xor    %edi,0x31(%rsi)
  1d:	32 2e                	xor    (%rsi),%ch
  1f:	30 34 29             	xor    %dh,(%rcx,%rbp,1)
  22:	20 34 2e             	and    %dh,(%rsi,%rbp,1)
  25:	38 2e                	cmp    %ch,(%rsi)
  27:	31 00                	xor    %eax,(%rax)
  29:	47                   	rex.RXB
  2a:	43                   	rex.XB
  2b:	43 3a 20             	rex.XB cmp (%r8),%spl
  2e:	28 55 62             	sub    %dl,0x62(%rbp)
  31:	75 6e                	jne    a1 <_init-0x400547>
  33:	74 75                	je     aa <_init-0x40053e>
  35:	2f                   	(bad)  
  36:	4c 69 6e 61 72 6f 20 	imul   $0x34206f72,0x61(%rsi),%r13
  3d:	34 
  3e:	2e 36 2e 33 2d 31 75 	cs ss xor %cs:%ss:0x75627531(%rip),%ebp        # 75627578 <_end+0x750254f0>
  45:	62 75 
  47:	6e                   	outsb  %ds:(%rsi),(%dx)
  48:	74 75                	je     bf <_init-0x400529>
  4a:	35 29 20 34 2e       	xor    $0x2e342029,%eax
  4f:	36 2e 33 00          	ss xor %cs:%ss:(%rax),%eax

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
   0:	2c 00                	sub    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	02 00                	add    (%rax),%al
   6:	00 00                	add    %al,(%rax)
   8:	00 00                	add    %al,(%rax)
   a:	08 00                	or     %al,(%rax)
   c:	00 00                	add    %al,(%rax)
   e:	00 00                	add    %al,(%rax)
  10:	c0 07 40             	rolb   $0x40,(%rdi)
  13:	00 00                	add    %al,(%rax)
  15:	00 00                	add    %al,(%rax)
  17:	00 70 08             	add    %dh,0x8(%rax)
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
   0:	77 00                	ja     2 <_init-0x4005e6>
   2:	00 00                	add    %al,(%rax)
   4:	02 00                	add    (%rax),%al
   6:	00 00                	add    %al,(%rax)
   8:	00 00                	add    %al,(%rax)
   a:	08 01                	or     %al,(%rcx)
   c:	00 00                	add    %al,(%rax)
   e:	00 00                	add    %al,(%rax)
  10:	c0 07 40             	rolb   $0x40,(%rdi)
  13:	00 00                	add    %al,(%rax)
  15:	00 00                	add    %al,(%rax)
  17:	00 30                	add    %dh,(%rax)
  19:	10 40 00             	adc    %al,0x0(%rax)
  1c:	00 00                	add    %al,(%rax)
  1e:	00 00                	add    %al,(%rax)
  20:	74 65                	je     87 <_init-0x400561>
  22:	73 74                	jae    98 <_init-0x400550>
  24:	5f                   	pop    %rdi
  25:	63 6f 64             	movslq 0x64(%rdi),%ebp
  28:	65                   	gs
  29:	2e 73 00             	jae,pn 2c <_init-0x4005bc>
  2c:	2f                   	(bad)  
  2d:	68 6f 6d 65 2f       	pushq  $0x2f656d6f
  32:	73 69                	jae    9d <_init-0x40054b>
  34:	6c                   	insb   (%dx),%es:(%rdi)
  35:	6b 79 61 72          	imul   $0x72,0x61(%rcx),%edi
  39:	2f                   	(bad)  
  3a:	57                   	push   %rdi
  3b:	6f                   	outsl  %ds:(%rsi),(%dx)
  3c:	72 6b                	jb     a9 <_init-0x40053f>
  3e:	73 70                	jae    b0 <_init-0x400538>
  40:	61                   	(bad)  
  41:	63 65 2f             	movslq 0x2f(%rbp),%esp
  44:	4c                   	rex.WR
  45:	4c 56                	rex.WR push %rsi
  47:	4d 2f                	rex.WRB (bad) 
  49:	6c                   	insb   (%dx),%es:(%rdi)
  4a:	6c                   	insb   (%dx),%es:(%rdi)
  4b:	76 6d                	jbe    ba <_init-0x40052e>
  4d:	2f                   	(bad)  
  4e:	6c                   	insb   (%dx),%es:(%rdi)
  4f:	69 62 2f 54 72 61 6e 	imul   $0x6e617254,0x2f(%rdx),%esp
  56:	73 66                	jae    be <_init-0x40052a>
  58:	6f                   	outsl  %ds:(%rsi),(%dx)
  59:	72 6d                	jb     c8 <_init-0x400520>
  5b:	73 2f                	jae    8c <_init-0x40055c>
  5d:	48                   	rex.W
  5e:	65                   	gs
  5f:	74 50                	je     b1 <_init-0x400537>
  61:	72 6f                	jb     d2 <_init-0x400516>
  63:	66                   	data16
  64:	73 2f                	jae    95 <_init-0x400553>
  66:	73 6f                	jae    d7 <_init-0x400511>
  68:	75 72                	jne    dc <_init-0x40050c>
  6a:	63 65 00             	movslq 0x0(%rbp),%esp
  6d:	47                   	rex.RXB
  6e:	4e 55                	rex.WRX push %rbp
  70:	20 41 53             	and    %al,0x53(%rcx)
  73:	20 32                	and    %dh,(%rdx)
  75:	2e 32 32             	xor    %cs:(%rdx),%dh
  78:	00 01                	add    %al,(%rcx)
  7a:	80                   	.byte 0x80

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
   0:	01 11                	add    %edx,(%rcx)
   2:	00 10                	add    %dl,(%rax)
   4:	06                   	(bad)  
   5:	11 01                	adc    %eax,(%rcx)
   7:	12 01                	adc    (%rcx),%al
   9:	03 08                	add    (%rax),%ecx
   b:	1b 08                	sbb    (%rax),%ecx
   d:	25 08 13 05 00       	and    $0x51308,%eax
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
   0:	ee                   	out    %al,(%dx)
   1:	01 00                	add    %eax,(%rax)
   3:	00 02                	add    %al,(%rdx)
   5:	00 22                	add    %ah,(%rdx)
   7:	00 00                	add    %al,(%rax)
   9:	00 01                	add    %al,(%rcx)
   b:	01 fb                	add    %edi,%ebx
   d:	0e                   	(bad)  
   e:	0d 00 01 01 01       	or     $0x1010100,%eax
  13:	01 00                	add    %eax,(%rax)
  15:	00 00                	add    %al,(%rax)
  17:	01 00                	add    %eax,(%rax)
  19:	00 01                	add    %al,(%rcx)
  1b:	00 74 65 73          	add    %dh,0x73(%rbp,%riz,2)
  1f:	74 5f                	je     80 <_init-0x400568>
  21:	63 6f 64             	movslq 0x64(%rdi),%ebp
  24:	65                   	gs
  25:	2e 73 00             	jae,pn 28 <_init-0x4005c0>
  28:	00 00                	add    %al,(%rax)
  2a:	00 00                	add    %al,(%rax)
  2c:	00 09                	add    %cl,(%rcx)
  2e:	02 c0                	add    %al,%al
  30:	07                   	(bad)  
  31:	40 00 00             	add    %al,(%rax)
  34:	00 00                	add    %al,(%rax)
  36:	00 1a                	add    %bl,(%rdx)
  38:	77 2f                	ja     69 <_init-0x40057f>
  3a:	30 59 59             	xor    %bl,0x59(%rcx)
  3d:	59                   	pop    %rcx
  3e:	59                   	pop    %rcx
  3f:	59                   	pop    %rcx
  40:	83 83 84 59 59 59 59 	addl   $0x59,0x59595984(%rbx)
  47:	59                   	pop    %rcx
  48:	83 4b 83 83          	orl    $0xffffff83,-0x7d(%rbx)
  4c:	83 ad ad 83 83 59 83 	subl   $0xffffff83,0x598383ad(%rbp)
  53:	75 03                	jne    58 <_init-0x400590>
  55:	0a c8                	or     %al,%cl
  57:	4d 59                	rex.WRB pop %r9
  59:	59                   	pop    %rcx
  5a:	91                   	xchg   %eax,%ecx
  5b:	59                   	pop    %rcx
  5c:	4e                   	rex.WRX
  5d:	4b 3d 2f 3d 3d 3f    	rex.WXB cmp $0x3f3d3d2f,%rax
  63:	59                   	pop    %rcx
  64:	67 31 59 59          	xor    %ebx,0x59(%ecx)
  68:	59                   	pop    %rcx
  69:	59                   	pop    %rcx
  6a:	2f                   	(bad)  
  6b:	3d 31 4b 4b 4b       	cmp    $0x4b4b4b31,%eax
  70:	3d 30 59 4b 03       	cmp    $0x34b5930,%eax
  75:	0b ba 77 2f 30 59    	or     0x59302f77(%rdx),%edi
  7b:	59                   	pop    %rcx
  7c:	59                   	pop    %rcx
  7d:	59                   	pop    %rcx
  7e:	59                   	pop    %rcx
  7f:	83 83 84 59 59 59 59 	addl   $0x59,0x59595984(%rbx)
  86:	83 83 4b 83 83 83 ad 	addl   $0xffffffad,-0x7c7c7cb5(%rbx)
  8d:	ad                   	lods   %ds:(%rsi),%eax
  8e:	83 83 83 59 83 83 75 	addl   $0x75,-0x7c7ca67d(%rbx)
  95:	03 0a                	add    (%rdx),%ecx
  97:	9e                   	sahf   
  98:	4d 59                	rex.WRB pop %r9
  9a:	59                   	pop    %rcx
  9b:	59                   	pop    %rcx
  9c:	59                   	pop    %rcx
  9d:	59                   	pop    %rcx
  9e:	59                   	pop    %rcx
  9f:	da 4b 3d             	fimull 0x3d(%rbx)
  a2:	2f                   	(bad)  
  a3:	3d 3d 3f 59 67       	cmp    $0x67593f3d,%eax
  a8:	31 59 59             	xor    %ebx,0x59(%rcx)
  ab:	59                   	pop    %rcx
  ac:	59                   	pop    %rcx
  ad:	59                   	pop    %rcx
  ae:	3d 59 59 59 59       	cmp    $0x59595959,%eax
  b3:	2f                   	(bad)  
  b4:	3d 31 4b 4b 4b       	cmp    $0x4b4b4b31,%eax
  b9:	3d 30 59 3d 59       	cmp    $0x593d5930,%eax
  be:	4b 03 0b             	rex.WXB add (%r11),%rcx
  c1:	82                   	(bad)  
  c2:	77 2f                	ja     f3 <_init-0x4004f5>
  c4:	30 59 59             	xor    %bl,0x59(%rcx)
  c7:	59                   	pop    %rcx
  c8:	59                   	pop    %rcx
  c9:	59                   	pop    %rcx
  ca:	83 83 84 59 59 59 59 	addl   $0x59,0x59595984(%rbx)
  d1:	59                   	pop    %rcx
  d2:	83 4b 83 83          	orl    $0xffffff83,-0x7d(%rbx)
  d6:	83 ad ad 83 75 83 59 	subl   $0x59,-0x7c8a7c53(%rbp)
  dd:	75 75                	jne    154 <_init-0x400494>
  df:	03 0b                	add    (%rbx),%ecx
  e1:	74 31                	je     114 <_init-0x4004d4>
  e3:	23 7b 2f             	and    0x2f(%rbx),%edi
  e6:	30 59 59             	xor    %bl,0x59(%rcx)
  e9:	59                   	pop    %rcx
  ea:	59                   	pop    %rcx
  eb:	59                   	pop    %rcx
  ec:	83 83 84 59 59 59 59 	addl   $0x59,0x59595984(%rbx)
  f3:	59                   	pop    %rcx
  f4:	83 4b 83 83          	orl    $0xffffff83,-0x7d(%rbx)
  f8:	83 ad ad 83 83 59 4b 	subl   $0x4b,0x598383ad(%rbp)
  ff:	59                   	pop    %rcx
 100:	83 83 83 83 ad ad 83 	addl   $0xffffff83,-0x52527c7d(%rbx)
 107:	83 59 83 75          	sbbl   $0x75,-0x7d(%rcx)
 10b:	21 2f                	and    %ebp,(%rdi)
 10d:	03 0b                	add    (%rbx),%ecx
 10f:	3c 31                	cmp    $0x31,%al
 111:	23 7b 2f             	and    0x2f(%rbx),%edi
 114:	30 59 59             	xor    %bl,0x59(%rcx)
 117:	59                   	pop    %rcx
 118:	59                   	pop    %rcx
 119:	59                   	pop    %rcx
 11a:	83 83 84 59 59 59 59 	addl   $0x59,0x59595984(%rbx)
 121:	83 83 4b 83 83 83 ad 	addl   $0xffffffad,-0x7c7c7cb5(%rbx)
 128:	ad                   	lods   %ds:(%rsi),%eax
 129:	83 83 59 4b 59 83 83 	addl   $0xffffff83,-0x7ca6b4a7(%rbx)
 130:	83 83 ad ad 83 83 59 	addl   $0x59,-0x7c7c5253(%rbx)
 137:	91                   	xchg   %eax,%ecx
 138:	30 83 5a 83 75 21    	xor    %al,0x2175835a(%rbx)
 13e:	2f                   	(bad)  
 13f:	03 0b                	add    (%rbx),%ecx
 141:	82                   	(bad)  
 142:	23 83 2f 2f 59 59    	and    0x59592f2f(%rbx),%eax
 148:	3d 2f 59 59 2f       	cmp    $0x2f59592f,%eax
 14d:	2f                   	(bad)  
 14e:	59                   	pop    %rcx
 14f:	59                   	pop    %rcx
 150:	3d 2f 59 59 59       	cmp    $0x5959592f,%eax
 155:	2f                   	(bad)  
 156:	2f                   	(bad)  
 157:	59                   	pop    %rcx
 158:	59                   	pop    %rcx
 159:	3d 2f 59 59 59       	cmp    $0x5959592f,%eax
 15e:	59                   	pop    %rcx
 15f:	2f                   	(bad)  
 160:	2f                   	(bad)  
 161:	59                   	pop    %rcx
 162:	59                   	pop    %rcx
 163:	3d 2f 59 59 59       	cmp    $0x5959592f,%eax
 168:	2f                   	(bad)  
 169:	2f                   	(bad)  
 16a:	59                   	pop    %rcx
 16b:	59                   	pop    %rcx
 16c:	3d 2f 59 59 59       	cmp    $0x5959592f,%eax
 171:	59                   	pop    %rcx
 172:	2f                   	(bad)  
 173:	2f                   	(bad)  
 174:	59                   	pop    %rcx
 175:	59                   	pop    %rcx
 176:	3d 2f 59 59 59       	cmp    $0x5959592f,%eax
 17b:	59                   	pop    %rcx
 17c:	59                   	pop    %rcx
 17d:	67 3d 2f 59 59 3d    	addr32 cmp $0x3d59592f,%eax
 183:	2f                   	(bad)  
 184:	59                   	pop    %rcx
 185:	2f                   	(bad)  
 186:	21 03                	and    %eax,(%rbx)
 188:	0b 9e 23 4b 83 30    	or     0x30834b23(%rsi),%ebx
 18e:	68 4b 03 0b 74       	pushq  $0x740b034b
 193:	59                   	pop    %rcx
 194:	75 03                	jne    199 <_init-0x40044f>
 196:	0b 4a 23             	or     0x23(%rdx),%ecx
 199:	3d 4b 59 59 75       	cmp    $0x7559594b,%eax
 19e:	3d 2f 4b 75 59       	cmp    $0x59754b2f,%eax
 1a3:	3d 2f 59 59 03       	cmp    $0x359592f,%eax
 1a8:	0b 08                	or     (%rax),%ecx
 1aa:	2e                   	cs
 1ab:	4d 59                	rex.WRB pop %r9
 1ad:	3d 30 92 59 59       	cmp    $0x59599230,%eax
 1b2:	59                   	pop    %rcx
 1b3:	3d 30 59 4b 22       	cmp    $0x224b5930,%eax
 1b8:	59                   	pop    %rcx
 1b9:	3d 03 0b 08 2e       	cmp    $0x2e080b03,%eax
 1be:	4d 59                	rex.WRB pop %r9
 1c0:	59                   	pop    %rcx
 1c1:	67 30 67 30          	xor    %ah,0x30(%edi)
 1c5:	91                   	xchg   %eax,%ecx
 1c6:	92                   	xchg   %eax,%edx
 1c7:	59                   	pop    %rcx
 1c8:	59                   	pop    %rcx
 1c9:	59                   	pop    %rcx
 1ca:	4b 3d 30 4b 4b 22    	rex.WXB cmp $0x224b4b30,%rax
 1d0:	59                   	pop    %rcx
 1d1:	67 3d 03 0b 08 12    	addr32 cmp $0x12080b03,%eax
 1d7:	4d 59                	rex.WRB pop %r9
 1d9:	59                   	pop    %rcx
 1da:	3d 30 92 67 30       	cmp    $0x30679230,%eax
 1df:	59                   	pop    %rcx
 1e0:	59                   	pop    %rcx
 1e1:	59                   	pop    %rcx
 1e2:	30 59 5a             	xor    %bl,0x5a(%rcx)
 1e5:	4b 59                	rex.WXB pop %r9
 1e7:	30 4b 4b             	xor    %cl,0x4b(%rbx)
 1ea:	22 59 3d             	and    0x3d(%rcx),%bl
 1ed:	02                   	.byte 0x2
 1ee:	05                   	.byte 0x5
 1ef:	00 01                	add    %al,(%rcx)
 1f1:	01                   	.byte 0x1
