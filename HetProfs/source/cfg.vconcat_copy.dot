digraph "CFG for 'vconcat_copy' function" {
	label="CFG for 'vconcat_copy' function";

	Node0x20bddd0 [shape=record,label="{entry:\l  %dst.addr = alloca i8*, align 8\l  %first.addr = alloca i8*, align 8\l  %args.addr = alloca %struct.__va_list_tag*, align 8\l  %end = alloca i8*, align 8\l  %arg = alloca i8*, align 8\l  %length = alloca i64, align 8\l  store i8* %dst, i8** %dst.addr, align 8\l  store i8* %first, i8** %first.addr, align 8\l  store %struct.__va_list_tag* %args, %struct.__va_list_tag** %args.addr, align 8\l  %0 = load i8** %dst.addr, align 8\l  store i8* %0, i8** %end, align 8\l  %1 = load i8** %first.addr, align 8\l  store i8* %1, i8** %arg, align 8\l  br label %for.cond\l}"];
	Node0x20bddd0 -> Node0x20bde30;
	Node0x20bde30 [shape=record,label="{for.cond:                                         \l  %2 = load i8** %arg, align 8\l  %tobool = icmp ne i8* %2, null\l  br i1 %tobool, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x20bde30:s0 -> Node0x20bde90;
	Node0x20bde30:s1 -> Node0x20be070;
	Node0x20bde90 [shape=record,label="{for.body:                                         \l  %3 = load i8** %arg, align 8\l  %call = call i64 @strlen(i8* %3) #6\l  store i64 %call, i64* %length, align 8\l  %4 = load i8** %end, align 8\l  %5 = load i8** %arg, align 8\l  %6 = load i64* %length, align 8\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 %6, i32 1, i1 false)\l  %7 = load i64* %length, align 8\l  %8 = load i8** %end, align 8\l  %add.ptr = getelementptr inbounds i8* %8, i64 %7\l  store i8* %add.ptr, i8** %end, align 8\l  br label %for.inc\l}"];
	Node0x20bde90 -> Node0x20bdef0;
	Node0x20bdef0 [shape=record,label="{for.inc:                                          \l  %9 = load %struct.__va_list_tag** %args.addr, align 8\l  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag* %9, i32 0, i32 0\l  %gp_offset = load i32* %gp_offset_p\l  %fits_in_gp = icmp ule i32 %gp_offset, 40\l  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem\l|{<s0>T|<s1>F}}"];
	Node0x20bdef0:s0 -> Node0x20bdf50;
	Node0x20bdef0:s1 -> Node0x20bdfb0;
	Node0x20bdf50 [shape=record,label="{vaarg.in_reg:                                     \l  %10 = getelementptr inbounds %struct.__va_list_tag* %9, i32 0, i32 3\l  %reg_save_area = load i8** %10\l  %11 = getelementptr i8* %reg_save_area, i32 %gp_offset\l  %12 = bitcast i8* %11 to i8**\l  %13 = add i32 %gp_offset, 8\l  store i32 %13, i32* %gp_offset_p\l  br label %vaarg.end\l}"];
	Node0x20bdf50 -> Node0x20be010;
	Node0x20bdfb0 [shape=record,label="{vaarg.in_mem:                                     \l  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag* %9, i32 0, i32 2\l  %overflow_arg_area = load i8** %overflow_arg_area_p\l  %14 = bitcast i8* %overflow_arg_area to i8**\l  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i32 8\l  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p\l  br label %vaarg.end\l}"];
	Node0x20bdfb0 -> Node0x20be010;
	Node0x20be010 [shape=record,label="{vaarg.end:                                        \l  %vaarg.addr = phi i8** [ %12, %vaarg.in_reg ], [ %14, %vaarg.in_mem ]\l  %15 = load i8** %vaarg.addr\l  store i8* %15, i8** %arg, align 8\l  br label %for.cond\l}"];
	Node0x20be010 -> Node0x20bde30;
	Node0x20be070 [shape=record,label="{for.end:                                          \l  %16 = load i8** %end, align 8\l  store i8 0, i8* %16, align 1\l  %17 = load i8** %dst.addr, align 8\l  ret i8* %17\l}"];
}
